using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Oracle.ManagedDataAccess.Client;
using model;
using System.Configuration;
using System.Drawing.Printing;
using NTwain;
using NTwain.Data;
using System.Reflection;
using System.Drawing.Imaging;
using System.Threading;
using System.Diagnostics;
using System.IO;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.Net;
using System.Drawing.Drawing2D;
using funciones;
using System.Threading.Tasks;

namespace OrfeoScan_IDU_STRT
{
    public partial class ScanOrfeo : Form
    {
        //Variables de Scanner
        ImageCodecInfo _tiffCodecInfo;
        TwainSession _twain;
        bool _stopScan;
        bool _loadingCaps;
        List<System.Drawing.Image> imagenes = new List<System.Drawing.Image>();
        List<byte[]> streamer = new List<byte[]>();
        //List<PictureBox> boxes = new List<PictureBox>();

        int numero_box = 0;
        bool btnAllSettings = false;
        private int HoJas;
        private string Inf_radicadoIMG1;
        private string Inf_radicadoIMG2;
        private string Inf_radicadoIMG3;
        private string numeroExpediente;
        private string espCodi;
        private string varFechaSistema = "";
        private string varIsNull = "";
        private bool Doc_Anexo;
        private int paginaActual = 0;

        //Variables de formularios
        funciones.funciones funciones = new funciones.funciones();
        RawPrinterHelper RawPrinterHelper = new RawPrinterHelper();
        private string varConcat = "";
        private string varSubstr = "";
        private string varRadi_Fech_radi = "";
        private USUARIO usuarioScanOrfeo;
        Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
        private string DirTraB;
        //string digitalizador_user = "digitalizador40";
        //string digitalizador = "D1g1t4l#0129";
        string digitalizador_user = "orf16";
        string digitalizador = "liquidsnake86!";
        int[] pageRange = new int[2] { 0, 2 };
        private int PrintPage = 0;
        private System.Drawing.Image codbarras_private;
        List<etiquetas> ListaEtiquetas = new List<model.etiquetas>();
        PrintDocument pdoc = null;

        private Bitmap actualBitmap = null;
        private Bitmap workingBitmap = null;
        private Bitmap actualBitmap1 = null;
        private Bitmap actualBitmap2 = null;
        private Bitmap actualBitmap3 = null;
        private int actualpage1 = 0;
        private int actualpage2 = 1;
        private int actualpage3 = 2;

        public List<System.Drawing.Image> TiffCarga = new List<System.Drawing.Image>();
        public List<int> TiffCargaIndex = new List<int>();
        private string base64 = "";
        private string rutaTiff = "";
        string pref_pag = "PAG ";
        string path_ = null;
        int actual_page = -1;
        int total_page = 0;
        Bitmap[] editor = new Bitmap[1];

        private Point RectStartPoint;
        private System.Drawing.Rectangle Rect = new System.Drawing.Rectangle();
        private Brush selectionBrush = new SolidBrush(System.Drawing.Color.FromArgb(128, 72, 145, 220));
        private Brush selectionBrush1 = new SolidBrush(System.Drawing.Color.FromArgb(1, 130, 48, 211));
        private Point _StartPoint;

        private string path_recycle = "";
        private string work_folder = @"D:\imgidu\work\";
        private bool agregar_behind = true;
        private bool Es_inicial = true;
        private int adicionar_scan = -1;

        private float zoom_=1F;
        private string temp_radicado = "";
        private string temp_expediente = "";

        private void zoomALaSelecciónToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int w_p = panel2.Width- System.Windows.Forms.SystemInformation.VerticalScrollBarWidth;
            if (actual_page!=-1)
            {
                using (System.Drawing.Image image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff"))
                {
                    zoom_ = ((float)w_p / (float)image.Width);
                    this.workingBitmap = new Bitmap(image,
                    new Size((int)((float)image.Width * zoom_), (int)((float)image.Height * zoom_)));
                    this.PageEdit.Image = workingBitmap;
                    garbage_collector();
                }
                toolStripMenuItem2.Checked = false;
                toolStripMenuItem3.Checked = false;
                toolStripMenuItem4.Checked = false;
                toolStripMenuItem5.Checked = false;
                toolStripMenuItem6.Checked = false;
                toolStripMenuItem7.Checked = false;
                toolStripMenuItem8.Checked = false;
                toolStripMenuItem9.Checked = false;
            }
            

            //actual_page = page;
            //this.PageEdit.Image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff");



        }
        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
           
            
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 0.1F;
            toolStripMenuItem2.Checked = true;
            toolStripMenuItem3.Checked = false;
            toolStripMenuItem4.Checked = false;
            toolStripMenuItem5.Checked = false;
            toolStripMenuItem6.Checked = false;
            toolStripMenuItem7.Checked = false;
            toolStripMenuItem8.Checked = false;
            toolStripMenuItem9.Checked = false;
            cargarPrincipal(actual_page);
            return;
        }

        private void toolStripMenuItem3_Click(object sender, EventArgs e)
        {
            
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 0.25F;
            toolStripMenuItem2.Checked = false;
            toolStripMenuItem3.Checked = true;
            toolStripMenuItem4.Checked = false;
            toolStripMenuItem5.Checked = false;
            toolStripMenuItem6.Checked = false;
            toolStripMenuItem7.Checked = false;
            toolStripMenuItem8.Checked = false;
            toolStripMenuItem9.Checked = false;
            cargarPrincipal(actual_page);
            return;
        }

        private void toolStripMenuItem4_Click(object sender, EventArgs e)
        {
            
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 0.5F;
            toolStripMenuItem2.Checked = false;
            toolStripMenuItem3.Checked = false;
            toolStripMenuItem4.Checked = true;
            toolStripMenuItem5.Checked = false;
            toolStripMenuItem6.Checked = false;
            toolStripMenuItem7.Checked = false;
            toolStripMenuItem8.Checked = false;
            toolStripMenuItem9.Checked = false;
            cargarPrincipal(actual_page);
            return;
        }

        private void toolStripMenuItem5_Click(object sender, EventArgs e)
        {
            
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 0.75F;
            toolStripMenuItem2.Checked = false;
            toolStripMenuItem3.Checked = false;
            toolStripMenuItem4.Checked = false;
            toolStripMenuItem5.Checked = true;
            toolStripMenuItem6.Checked = false;
            toolStripMenuItem7.Checked = false;
            toolStripMenuItem8.Checked = false;
            toolStripMenuItem9.Checked = false;
            cargarPrincipal(actual_page);
            return;
        }

        private void toolStripMenuItem6_Click(object sender, EventArgs e)
        {
            
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 1F;
            toolStripMenuItem2.Checked = false;
            toolStripMenuItem3.Checked = false;
            toolStripMenuItem4.Checked = false;
            toolStripMenuItem5.Checked = false;
            toolStripMenuItem6.Checked = true;
            toolStripMenuItem7.Checked = false;
            toolStripMenuItem8.Checked = false;
            toolStripMenuItem9.Checked = false;
            cargarPrincipal(actual_page);
            return;
        }

        private void toolStripMenuItem7_Click(object sender, EventArgs e)
        {
            
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 1.25F;
            toolStripMenuItem2.Checked = false;
            toolStripMenuItem3.Checked = false;
            toolStripMenuItem4.Checked = false;
            toolStripMenuItem5.Checked = false;
            toolStripMenuItem6.Checked = false;
            toolStripMenuItem7.Checked = true;
            toolStripMenuItem8.Checked = false;
            toolStripMenuItem9.Checked = false;
            cargarPrincipal(actual_page);
            return;
        }

        private void toolStripMenuItem8_Click(object sender, EventArgs e)
        {
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 1.5F;
            cargarPrincipal(actual_page);
            toolStripMenuItem2.Checked = false;
            toolStripMenuItem3.Checked = false;
            toolStripMenuItem4.Checked = false;
            toolStripMenuItem5.Checked = false;
            toolStripMenuItem6.Checked = false;
            toolStripMenuItem7.Checked = false;
            toolStripMenuItem8.Checked = true;
            toolStripMenuItem9.Checked = false;
            return;
        }

        private void toolStripMenuItem9_Click(object sender, EventArgs e)
        {
            if (actual_page == -1)
            {
                return;
            }
            zoom_ = 2F;
            cargarPrincipal(actual_page);
            toolStripMenuItem2.Checked = false;
            toolStripMenuItem3.Checked = false;
            toolStripMenuItem4.Checked = false;
            toolStripMenuItem5.Checked = false;
            toolStripMenuItem6.Checked = false;
            toolStripMenuItem7.Checked = false;
            toolStripMenuItem8.Checked = false;
            toolStripMenuItem9.Checked = true;
            return;
        }
        private void zoomAlejarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (actual_page == -1)
            {
                return;
            }
            if (zoom_ >=0 && zoom_ <= 0.25F)
            {
                zoom_ = 0.1F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 0.25F && zoom_ <= 0.5F)
            {
                zoom_ = 0.25F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 0.5F && zoom_ <= 0.75F)
            {
                zoom_ = 0.5F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 0.75F && zoom_ <= 1F)
            {
                zoom_ = 0.75F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 1F && zoom_ <= 1.25F)
            {
                zoom_ = 1F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 1.25F && zoom_ <= 1.5F)
            {
                zoom_ = 1.25F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 1.5F && zoom_ <= 2F)
            {
                zoom_ = 1.5F;
                cargarPrincipal(actual_page);
                return;
            }
        }
        private void zoomAcercarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (actual_page == -1)
            {
                return;
            }
            if (zoom_ >= 0 && zoom_ <= 0.1F)
            {
                zoom_ = 0.25F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 0.1F && zoom_ <= 0.25F)
            {
                zoom_ = 0.5F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 0.25F && zoom_ <= 0.5F)
            {
                zoom_ = 0.75F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 0.5F && zoom_ <= 0.75F)
            {
                zoom_ = 1F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 0.75F && zoom_ <= 1F)
            {
                zoom_ = 1.25F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 1F && zoom_ <= 1.25F)
            {
                zoom_ = 1.50F;
                cargarPrincipal(actual_page);
                return;
            }
            if (zoom_ > 1.25F && zoom_ <= 1.5F)
            {
                zoom_ = 2F;
                cargarPrincipal(actual_page);
                return;
            }
        }
        private void button9_Click(object sender, EventArgs e)
        {
            if (PageEdit.Image != null && Rect.X > 0 && Rect.Y > 0)
            {
                using (Bitmap bitmap = new Bitmap(Width, Height))
                using (Graphics graphics = Graphics.FromImage(TiffCarga[0]))
                {
                    System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, Width, Height);
                    graphics.FillRectangle(new SolidBrush(System.Drawing.Color.White), Rect);
                    Invalidate();
                    PageEdit.Refresh();
                }
            }
        }
        private void PageEdit_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button != MouseButtons.Left)
            {
            return;
            }
            Point tempEndPoint = e.Location;
            //textBox1.Text = tempEndPoint.X.ToString();
            //textBox2.Text = tempEndPoint.Y.ToString();

            _StartPoint = e.Location;
            //textBox5.Text = _StartPoint.X.ToString();
            //textBox4.Text = _StartPoint.Y.ToString();
            //textBox5.Text = panel2.AutoScrollPosition.X.ToString();
            //textBox4.Text = panel2.AutoScrollPosition.Y.ToString();


            if (PageEdit.Image != null)
            {
                if (true)
                {
                    Rect.Location = new Point(
                     Math.Min(RectStartPoint.X, tempEndPoint.X),
                     Math.Min(RectStartPoint.Y, tempEndPoint.Y));
                    Rect.Size = new Size(
                        Math.Abs(RectStartPoint.X - tempEndPoint.X),
                        Math.Abs(RectStartPoint.Y - tempEndPoint.Y));

                    if (e.Y % 60 == 0 && Math.Abs(RectStartPoint.Y - tempEndPoint.Y) > 500 && e.Y <= PageEdit.Image.Height)
                    {
                        panel2.AutoScrollPosition = new Point(-panel2.AutoScrollPosition.X, e.Y - 0);
                        //var hhh = panel2.AutoScrollPosition.X;
                    }
                    Point changePoint = new Point(e.Location.X - RectStartPoint.X,
                                  e.Location.Y - RectStartPoint.Y);
                    if (e.Y % 80 == 0 && Math.Abs(RectStartPoint.Y - tempEndPoint.Y) > 400 && e.Y <= PageEdit.Image.Height)
                    {
                        Thread.Sleep(50);
                    }
                    garbage_collector();
                }
            }
            PageEdit.Invalidate();
        }
        private void PageEdit_Click(object sender, EventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;
            if (me.Button != MouseButtons.Left)
            {
                Rect.Location = new Point(0, 0);
                Rect.Size = new Size(0, 0);
                PageEdit.Invalidate();
            }
            
        }
        private void PageEdit_MouseDown(object sender, MouseEventArgs e)
        {
            // Determine the initial rectangle coordinates...
            RectStartPoint = e.Location;

            Invalidate();
        }
        private void PageEdit_Paint(object sender, PaintEventArgs e)
        {
            // Draw the rectangle...
            if (PageEdit.Image != null)
            {
                if (true)
                {

                    if (Rect != null && Rect.Width > 0 && Rect.Height > 0)
                    {
                        if (true)
                        {
                            Pen blackPen = new Pen(System.Drawing.Color.Black, 1);
                            e.Graphics.DrawRectangle(blackPen, Rect);
                            e.Graphics.FillRectangle(selectionBrush, Rect);

                            garbage_collector();
                        }
                    }
                }
            }
        }
        private void PageEdit_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                if (Rect.Contains(e.Location))
                {
                }
            }
        }
        private void panel2_MouseMove(object sender, MouseEventArgs e)
        {

            //if (e.Button == MouseButtons.Left)
            //{
            //    Point changePoint = new Point(e.Location.X - _StartPoint.X,
            //                                  e.Location.Y - _StartPoint.Y);
            //    panel1.AutoScrollPosition = new Point(-panel1.AutoScrollPosition.X - changePoint.X,
            //                                          -panel1.AutoScrollPosition.Y - changePoint.Y);
            //}
        }
        private void panel2_MouseDown(object sender, MouseEventArgs e)
        {
            //if (e.Button == MouseButtons.Left)
            //    _StartPoint = e.Location;
        }
        private void button10_Click(object sender, EventArgs e)
        {
            var rectangulo = Rect;
            var imagen = PageEdit.Image;
        }


        private void btnAbrirImagen_Click(object sender, EventArgs e)
        {
            button8.BackColor = System.Drawing.Color.White;
            btnAbrirImagen.BackColor = System.Drawing.Color.Black;
        }
        private void cargarPrincipal(int page)
        {
            actual_page = page;
            //this.PageEdit.Image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff");
            if (page+1 <= total_page)
            {
                using (System.Drawing.Image image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff"))
                {
                    this.workingBitmap = new Bitmap(image,
                    new Size((int)((float)image.Width * zoom_), (int)((float)image.Height * zoom_)));
                    this.PageEdit.Image = workingBitmap;
                    garbage_collector();
                }
            }
            
        }
        private void cargarImagen0000(int[] range, int pagecount)
        {
            int cont = 0;
            for (int i = range[0]; i < range[1]+1; i++)
            {
                if (cont==0)
                {
                    if (i<= pagecount-1)
                    {
                        PageScreen1.Image = GetThumbnail_cambio(new Size(100, 100), work_folder +i+ ".tiff");
                        lblScreen1.Text = (i + 1).ToString();
                    }
                    else
                    {
                        PageScreen1.Image = null;
                        lblScreen1.Text = "";
                    }
                }
                if (cont == 1)
                {
                    if (i <= pagecount - 1)
                    {
                        PageScreen2.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + i + ".tiff");
                        lblScreen2.Text = (i + 1).ToString();
                    }
                    else
                    {
                        PageScreen2.Image = null;
                        lblScreen2.Text = "";
                    }
                }
                if (cont == 2)
                {
                    if (i <= pagecount - 1)
                    {
                        PageScreen3.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + i + ".tiff");
                        lblScreen3.Text = (i + 1).ToString();
                    }
                    else
                    {
                        PageScreen3.Image = null;
                        lblScreen3.Text = "";
                    }
                }
                cont++;
            }
            garbage_collector();
        }
        public Bitmap GetThumbnail_cambio(Size viewport, string path)
        {

            System.Drawing.Image imagen = System.Drawing.Image.FromFile(path);
            Size imageSize = imagen.Size;
            double dw = ((double)imageSize.Width / viewport.Width);
            double dh = ((double)imageSize.Height / viewport.Height);
            double scale = dw;
            if (dh > dw) scale = dh;
            int scaledWidth = (int)(imageSize.Width / scale);
            int scaledHeight = (int)(imageSize.Height / scale);
            int xShift = (viewport.Width - scaledWidth) / 2;
            int yShift = (viewport.Height - scaledHeight) / 2;
            Bitmap viewportBitmap = new Bitmap(viewport.Width, viewport.Height);
            Bitmap bitmap = new Bitmap(imagen, scaledWidth, scaledHeight);
            using (Graphics graphics = Graphics.FromImage(viewportBitmap))
            {
                graphics.DrawImage(bitmap, xShift, yShift);
            }
            imagen.Dispose();
            garbage_collector();
            return viewportBitmap;
        }
        public void seleccionPage(int page)
        {
            //lblScreen1.BackColor = System.Drawing.Color.Goldenrod;
            //lblScreen2.BackColor = System.Drawing.Color.Goldenrod;
            //lblScreen3.BackColor = System.Drawing.Color.Goldenrod;
            //if (page==0)
            //{
            //    lblScreen1.BackColor = System.Drawing.Color.DarkCyan;
            //}
            //if (page == 1)
            //{
            //    lblScreen2.BackColor = System.Drawing.Color.DarkCyan;
            //}
            //if (page == 2)
            //{
            //    lblScreen3.BackColor = System.Drawing.Color.DarkCyan;
            //}
        }
        private void PageScreen1_Click(object sender, EventArgs e)
        {
            if (total_page > 0)
            {
                if (pageRange[0] + 1 <= total_page)
                {
                    actual_page = pageRange[0];
                    cargarPrincipal(actual_page);
                    //this.PageEdit.Image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff");
                    cambio_flecha = true;
                    comboBox1.Text = (actual_page + 1).ToString();
                    comboBox2.Text = (actual_page + 1).ToString();
                    pintar_imagen(1, actual_page);
                    cambio_flecha = false;
                    garbage_collector();
                    seleccionPage(0);
                }
            }
        }
        private void PageScreen2_Click(object sender, EventArgs e)
        {
            if (total_page > 0)
            {
                
                if (pageRange[0] + 2 <= total_page)
                {
                    actual_page = pageRange[0] + 1;
                    cargarPrincipal(actual_page);
                    //this.PageEdit.Image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff");
                    cambio_flecha = true;
                    comboBox1.Text = (actual_page + 1).ToString();
                    comboBox2.Text = (actual_page + 1).ToString();
                    pintar_imagen(2, actual_page);
                    cambio_flecha = false;
                    garbage_collector();
                    seleccionPage(1);
                }
                
            }
            
        }
        private void PageScreen3_Click(object sender, EventArgs e)
        {
            if (total_page > 0)
            {
                
                if (pageRange[1] + 1 <= total_page)
                {
                    actual_page = pageRange[1];
                    cargarPrincipal(actual_page);
                    //this.PageEdit.Image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff");
                    cambio_flecha = true;
                    comboBox1.Text = (actual_page + 1).ToString();
                    comboBox2.Text = (actual_page + 1).ToString();
                    pintar_imagen(3, actual_page);
                    cambio_flecha = false;
                    garbage_collector();
                    seleccionPage(2);
                }
            }
        }
        private void btnPrevScreen_Click(object sender, EventArgs e)
        {
            if (actual_page != 0)
            {
                if (actual_page <= total_page-1)
                {
                    actual_page--;
                    comboBox1.Text = (actual_page + 1).ToString();
                    comboBox2.Text = (actual_page + 1).ToString();
                    pintar_imagen(1, actual_page);
                    cargarPrincipal(actual_page);
                }
            }
            if (actual_page<pageRange[0])
            {
                seleccionPage(2);
                pageRange[0] = actual_page;
                pageRange[1] = pageRange[0] + 2;
                cargarImagen0000(pageRange, total_page);
            }
            else
            {
                if (actual_page== pageRange[0])
                {
                    seleccionPage(0);
                }
                if (actual_page == pageRange[0]+1)
                {
                    seleccionPage(1);
                }
                if (actual_page == pageRange[0]+2)
                {
                    seleccionPage(2);
                }
            }
        }
        private bool cambio_flecha = false;
        private void btnNextScreen_Click(object sender, EventArgs e)
        {
            if (actual_page+2<=total_page)
            {
                actual_page++;
                comboBox1.Text = (actual_page + 1).ToString();
                comboBox2.Text = (actual_page + 1).ToString();
                pintar_imagen(1, actual_page);
                cargarPrincipal(actual_page);
            }
            if (actual_page > pageRange[1])
            {
                seleccionPage(0);
                pageRange[0]= actual_page;
                pageRange[1]= pageRange[0]+2;
                cargarImagen0000(pageRange, total_page);
            }
            else
            {
                if (actual_page == pageRange[0])
                {
                    seleccionPage(0);
                }
                if (actual_page == pageRange[0] + 1)
                {
                    seleccionPage(1);
                }
                if (actual_page == pageRange[0] + 2)
                {
                    seleccionPage(2);
                }
            }
        }
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBox1.SelectedIndex >= 0 && !cambio_flecha)
            {
                string page = comboBox1.Text;
                int page_int = -1;
                if (int.TryParse(page, out page_int))
                {
                    if (page_int <= total_page)
                    {
                        pageRange[0] = page_int - 1;
                        pageRange[1] = pageRange[0] + 2;
                        actual_page = page_int - 1;
                        cargarImagen0000(pageRange, total_page);
                        comboBox1.Text = (pageRange[0] + 1).ToString();
                        comboBox2.Text = (pageRange[0] + 1).ToString();
                        pintar_imagen(1, pageRange[0]);
                        cargarPrincipal(actual_page);

                    }
                }
            }
            PageEdit.Focus();
        }
        private bool crearPdf_1(string rutaFinal)
        {
            show_loading_panel(600, 177, 359, 20, "Convirtiendo imagen a PDF");
            try
            {
                //Captar la ruta de imagenes del radicado, si existe: usar sus imagenes
                garbage_collector();

                //Crear primera pagina 
                System.Drawing.Image bmp = System.Drawing.Image.FromFile(work_folder + 0 + ".tiff");
                var width0 = bmp.Width;
                var height0 = bmp.Height;
                iTextSharp.text.Rectangle cero = new iTextSharp.text.Rectangle(width0, height0);

                Document doc = new Document(cero, 0, 0, 0, 0);

                doc.SetMargins(0, 0, 0, 0);
                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(rutaFinal, FileMode.Create));
                writer.PDFXConformance = PdfWriter.PDFA1B;
                doc.Open();

                PdfDictionary outi = new PdfDictionary(PdfName.OUTPUTINTENT);
                outi.Put(PdfName.OUTPUTCONDITIONIDENTIFIER, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.INFO, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.S, PdfName.GTS_PDFA1);

                //Perfiles icc
                var path = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase);
                path = path.Replace("file:\\", "");
                ICC_Profile icc = ICC_Profile.GetInstance(path + @"\sRGB_v4.icc");
                PdfICCBased ib = new PdfICCBased(icc);
                ib.Remove(PdfName.ALTERNATE);
                outi.Put(PdfName.DESTOUTPUTPROFILE, writer.AddToBody(ib).IndirectReference);

                writer.ExtraCatalog.Put(PdfName.OUTPUTINTENTS, new PdfArray(outi));

                BaseFont bf = BaseFont.CreateFont(path + @"\arial.ttf", BaseFont.WINANSI, true);
                iTextSharp.text.Font f = new iTextSharp.text.Font(bf, 12);

                float subtrahend0 = doc.PageSize.Height - 10;

                //iTextSharp.text.Image pool0 = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Tiff);


                iTextSharp.text.Image pool0;
                bool editada = false;
                foreach (var item in editadas)
                {
                    if (item==0)
                        editada = true;
                }
                if (editada)
                    pool0 = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Jpeg);
                else
                {
                    pool0 = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Jpeg);

                    //System.Drawing.Rectangle imageRect = new System.Drawing.Rectangle(0, 0, bmp.Size.Width, bmp.Size.Height);
                    //System.Drawing.Image image = (Bitmap)bmp.Clone(imageRect, PixelFormat.Format1bppIndexed);

                    //pool0 = iTextSharp.text.Image.GetInstance(bmp, null, false);
                    
                }
                    

                pool0.Alignment = 3;
                pool0.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend0);
                doc.Add(pool0);
                garbage_collector();
                //Crear las paginas
                for (int i = 1; i < total_page; ++i)
                {
                    bool editada1 = false;
                    foreach (var item in editadas)
                    {
                        if (item == i)
                            editada1 = true;
                    }

                    System.Drawing.Image bmp1 = System.Drawing.Image.FromFile(work_folder + i + ".tiff");
                    var width = bmp1.Width;
                    var height = bmp1.Height;
                    iTextSharp.text.Rectangle one = new iTextSharp.text.Rectangle(width, height);
                    doc.SetPageSize(one);
                    doc.NewPage();
                    float subtrahend = doc.PageSize.Height - 10;
                    iTextSharp.text.Image pool;

                    if (editada1)
                        pool = iTextSharp.text.Image.GetInstance(bmp1, ImageFormat.Jpeg);
                    else
                        pool = iTextSharp.text.Image.GetInstance(bmp1, ImageFormat.Jpeg);

                    //pool = iTextSharp.text.Image.GetInstance(bmp1, iTextSharp.text.Color.WHITE, false);

                    pool.Alignment = 3;
                    pool.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend);
                    doc.Add(pool);
                    bmp1.Dispose();
                    garbage_collector();
                }
                writer.CreateXmpMetadata();
                doc.Close();
                bmp.Dispose();
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                MessageBox.Show("Falla de sistema en la conversión a PDF/A");
                if (ex.ToString().Contains("utilizado en otro proceso"))
                {
                    MessageBox.Show("El PDF esta siendo utilizado en otro proceso");
                   
                }
                MessageBox.Show(ex.ToString());
                garbage_collector();
                return false;
            }
            garbage_collector();
            return true;
        }
        
        private void limpiar_imagen()
        {
            for (int i = 0; i < editor.Length; i++)
            {
                editor[i] = null;
            }
            Array.Resize<Bitmap>(ref editor, 1);
            
            if (actualBitmap!=null)
            {
                actualBitmap.Dispose();
            }
            if (workingBitmap != null)
            {
                workingBitmap.Dispose();
            }
            if (actualBitmap1 != null)
            {
                actualBitmap1.Dispose();
            }
            if (actualBitmap2 != null)
            {
                actualBitmap2.Dispose();
            }
            if (actualBitmap3 != null)
            {
                actualBitmap3.Dispose();
            }

            actualBitmap = null;
            workingBitmap = null;
            actualBitmap1 = null;
            actualBitmap2 = null;
            actualBitmap3 = null;
            actualpage1 = 0;
            actualpage2 = 1;
            actualpage3 = 2;
            rutaTiff = "";
            path_ = "";
            lblScreen1.Text = "";
            lblScreen2.Text = "";
            lblScreen3.Text = "";
            pageRange[0] = 0;
            pageRange[1] = 2;
            PageScreen1.Image = null;
            PageScreen2.Image = null;
            PageScreen3.Image = null;
            PageEdit.Image = null;
            comboBox1.Text = "";
            comboBox1.Items.Clear();
            comboBox2.Text = "";
            comboBox2.Items.Clear();
            garbage_collector();
            path_recycle = "";
            actual_page = -1;
            total_page = -1;
            lblScreen1.BackColor = System.Drawing.Color.Goldenrod;
            lblScreen2.BackColor = System.Drawing.Color.Goldenrod;
            lblScreen3.BackColor = System.Drawing.Color.Goldenrod;
            editadas.Clear();
            label28.Text = "";
            Es_inicial = true;
        }
        private void button17_Click(object sender, EventArgs e)
        {
            if (total_page>0)
            {
                PageScreen1.Image = null;
                PageScreen2.Image = null;
                PageScreen3.Image = null;
                PageEdit.Image = null;
                lblScreen1.Text = "";
                lblScreen2.Text = "";
                lblScreen3.Text = "";
                comboBox1.Text = "";
                comboBox1.Items.Clear();
                comboBox2.Text = "";
                comboBox2.Items.Clear();
                garbage_collector();
                int borrar = actual_page;
                if (borrar == 0)
                {
                    int paginas_nuevas = 0;
                    if (Directory.Exists(work_folder))
                    {
                        DirectoryInfo di = new System.IO.DirectoryInfo(work_folder);
                        foreach (FileInfo file in di.GetFiles())
                        {
                            if (file.Name == "0.tiff")
                            {
                                try
                                {
                                    file.Delete();
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            else
                            {
                                string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + woe + "_edit.tiff");
                                file.Delete();
                            }
                        }
                        foreach (FileInfo file in di.GetFiles())
                        {
                            string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                            woe = woe.Replace("_edit", "");
                            int numero_pag = -1;
                            if (int.TryParse(woe, out numero_pag))
                            {
                                numero_pag--;
                                System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + numero_pag + ".tiff");
                                paginas_nuevas++;
                                comboBox1.Items.Add(paginas_nuevas);
                                comboBox2.Items.Add(paginas_nuevas);
                            }
                        }
                    }
                    total_page = paginas_nuevas;
                    label28.Text = total_page + " Páginas";
                    cambio_flecha = true;
                    comboBox1.Text = "1";
                    comboBox2.Text = "1";
                    cambio_flecha = false;
                    pageRange[0] = 0;
                    pageRange[1] = 2;
                    pintar_imagen(1, 0);
                    cargarImagen0000(pageRange, total_page);
                    cargarPrincipal(pageRange[0]);
                    garbage_collector();
                    MessageBox.Show("Página Eliminada");
                }
                else
                {
                    actual_page--;
                    int paginas_nuevas = 0;
                    if (Directory.Exists(work_folder))
                    {
                        DirectoryInfo di = new System.IO.DirectoryInfo(work_folder);
                        foreach (FileInfo file in di.GetFiles())
                        {
                            if (file.Name == borrar + ".tiff")
                            {
                                try
                                {
                                    file.Delete();
                                }
                                catch (Exception)
                                {
                                }
                            }
                            else
                            {
                                string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + woe + "_edit.tiff");
                                file.Delete();
                            }
                        }
                        foreach (FileInfo file in di.GetFiles())
                        {
                            string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                            woe = woe.Replace("_edit", "");
                            int numero_pag = -1;
                            if (int.TryParse(woe, out numero_pag))
                            {
                                if (borrar < numero_pag)
                                {
                                    numero_pag--;
                                }
                                System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + numero_pag + ".tiff");
                                paginas_nuevas++;
                                comboBox1.Items.Add(paginas_nuevas);
                            }
                        }
                        total_page = paginas_nuevas;
                        label28.Text = total_page + " Páginas";
                        cambio_flecha = true;
                        comboBox1.Text = (actual_page+1).ToString();
                        comboBox2.Text = (actual_page + 1).ToString();
                        cambio_flecha = false;
                        pageRange[0] = actual_page;
                        pageRange[1] = actual_page+2;
                        pintar_imagen(1, actual_page);
                        cargarImagen0000(pageRange, total_page);
                        cargarPrincipal(actual_page);
                        garbage_collector();
                        MessageBox.Show("Página Eliminada");
                    }
                }
            }
        }

        public void TiffImage(string path)
        {
            this.path_ = path;
            this.actualBitmap = (Bitmap)System.Drawing.Image.FromFile(path);
        }
        public void TiffImage_cam(string path)
        {
            this.path_ = path;
            //cargarImagen()
            //this.actualBitmap = (Bitmap)System.Drawing.Image.FromFile(path);
        }
        public int numeroPaginas()
        {
            return this.actualBitmap.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page);
        }
        public Bitmap GetImagenActual()
        {
            return this.actualBitmap;
        }
        public Bitmap GetThumbnail(int pageNo, Size viewport)
        {
            actualBitmap.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, pageNo);
           
            Size imageSize = actualBitmap.Size;
            double dw = ((double)imageSize.Width / viewport.Width);
            double dh = ((double)imageSize.Height / viewport.Height);
            double scale = dw;
            if (dh > dw) scale = dh;
            int scaledWidth = (int)(imageSize.Width / scale);
            int scaledHeight = (int)(imageSize.Height / scale);
            int xShift = (viewport.Width - scaledWidth) / 2;
            int yShift = (viewport.Height - scaledHeight) / 2;
            Bitmap viewportBitmap = new Bitmap(viewport.Width, viewport.Height);
            Bitmap bitmap = new Bitmap(actualBitmap, scaledWidth, scaledHeight);
            using (Graphics graphics = Graphics.FromImage(viewportBitmap))
            {
                graphics.DrawImage(bitmap, xShift, yShift);
            }
            garbage_collector();
            return viewportBitmap;
        }
        public Bitmap GetWorkingImage(Size viewSize)
        {
            if (this.workingBitmap != null)
                return this.workingBitmap;
            double zoom = 1;
            this.workingBitmap = new Bitmap(this.actualBitmap,
                new Size((int)(this.actualBitmap.Width * zoom), (int)(this.actualBitmap.Height * zoom)));
            garbage_collector();
            return this.workingBitmap;
        }
        
        public Bitmap GetWorkingImage1(Size viewSize, int page)
        {
            if (actualBitmap!=null)
            {
                if (numeroPaginas()-1>= page)
                {
                    actualBitmap.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, page);
                }
            }
            double zoom = 1;
            this.workingBitmap = new Bitmap(this.actualBitmap,
                new Size((int)(this.actualBitmap.Width * zoom), (int)(this.actualBitmap.Height * zoom)));
            garbage_collector();
            return this.workingBitmap;
        }

        //lista de imagenes
        private void cargarimagen_(string path)
        {
            Bitmap bm = (Bitmap)System.Drawing.Image.FromFile(path);
            if (bm != null)
            {
                for (int i = 0; i < bm.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page); i++)
                {
                    bm.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, i);
                    Bitmap bm1 = new Bitmap(bm);
                    TiffCarga.Add(bm1);
                }
            }
            bm = null;
            bm.Dispose();
            garbage_collector();
        }
        public Bitmap GetThumbnail_(int pageNo, Size viewport)
        {
            Size imageSize = TiffCarga[pageNo].Size;
            double dw = ((double)imageSize.Width / viewport.Width);
            double dh = ((double)imageSize.Height / viewport.Height);
            double scale = dw;
            if (dh > dw) scale = dh;
            int scaledWidth = (int)(imageSize.Width / scale);
            int scaledHeight = (int)(imageSize.Height / scale);
            int xShift = (viewport.Width - scaledWidth) / 2;
            int yShift = (viewport.Height - scaledHeight) / 2;
            Bitmap viewportBitmap = new Bitmap(viewport.Width, viewport.Height);
            Bitmap bitmap = new Bitmap(TiffCarga[pageNo], scaledWidth, scaledHeight);
            using (Graphics graphics = Graphics.FromImage(viewportBitmap))
            {
                graphics.DrawImage(bitmap, xShift, yShift);
            }
            garbage_collector();
            return viewportBitmap;
        }
        public Bitmap GetWorkingImage_(Size viewSize, int page)
        {
            if (this.workingBitmap != null)
                return this.workingBitmap;
            double zoom = 1;
            int wi = TiffCarga[page].Width;
            int he = TiffCarga[page].Height;
            this.workingBitmap = new Bitmap((Bitmap)TiffCarga[page],
                new Size((int)(wi * zoom), (int)(he * zoom)));
            garbage_collector();
            return this.workingBitmap;
        }
        private void button13_Click(object sender, EventArgs e)
        {
            if (total_page <= 0)
            {
                return;
            }
            System.Drawing.Image actualBitmap_ = System.Drawing.Image.FromFile(work_folder + @"\" + actual_page + ".tiff");
            System.Drawing.Image rotated_image = RotateImage(actualBitmap_, 90, true, true, System.Drawing.Color.White);
            PageEdit.Image = null;

            if (pageRange[0]==actual_page)
            {
                PageScreen1.Image = null;
            }
            if (pageRange[0]+1 == actual_page)
            {
                PageScreen2.Image = null;
            }
            if (pageRange[0]+2 == actual_page)
            {
                PageScreen3.Image = null;
            }

            actualBitmap_.Dispose();
            garbage_collector();
            FileInfo info = new FileInfo(work_folder + actual_page + ".tiff");
            info.Delete();
            rotated_image.Save(work_folder + actual_page + ".tiff");
            cargarPrincipal(actual_page);


            

            if (pageRange[0] == actual_page)
            {
                PageScreen1.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                lblScreen1.Text = (actual_page + 1).ToString();
            }
            if (pageRange[0] + 1 == actual_page)
            {
                PageScreen2.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                lblScreen2.Text = (actual_page + 1).ToString();
            }
            if (pageRange[0] + 2 == actual_page)
            {
                PageScreen3.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                lblScreen3.Text = (actual_page + 1).ToString();
            }

            rotated_image.Dispose();
            garbage_collector();
        }

        private void button12_Click(object sender, EventArgs e)
        {
            if (total_page<=0)
            {
                return;
            }
            System.Drawing.Image actualBitmap_ = System.Drawing.Image.FromFile(work_folder + @"\" + actual_page + ".tiff");
            System.Drawing.Image rotated_image = RotateImage(actualBitmap_, -90, true, true, System.Drawing.Color.White);
            PageEdit.Image = null;

            if (pageRange[0] == actual_page)
            {
                PageScreen1.Image = null;
            }
            if (pageRange[0] + 1 == actual_page)
            {
                PageScreen2.Image = null;
            }
            if (pageRange[0] + 2 == actual_page)
            {
                PageScreen3.Image = null;
            }

            actualBitmap_.Dispose();
            garbage_collector();
            FileInfo info = new FileInfo(work_folder + actual_page + ".tiff");
            info.Delete();
            rotated_image.Save(work_folder + actual_page + ".tiff");
            cargarPrincipal(actual_page);
            if (pageRange[0] == actual_page)
            {
                PageScreen1.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                lblScreen1.Text = (actual_page + 1).ToString();
            }
            if (pageRange[0] + 1 == actual_page)
            {
                PageScreen2.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                lblScreen2.Text = (actual_page + 1).ToString();
            }
            if (pageRange[0] + 2 == actual_page)
            {
                PageScreen3.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                lblScreen3.Text = (actual_page + 1).ToString();
            }
            rotated_image.Dispose();
            garbage_collector();
        }
        private void button11_Click(object sender, EventArgs e)
        {
            if (total_page > 0)
            {
                var confirmResult = MessageBox.Show("Se encuentra editando una imagen. Recuede guardar la imagen antes de continuar. Desea continuar ?",
                                                     "Confirmación",
                                                     MessageBoxButtons.YesNo);
                if (confirmResult == DialogResult.Yes)
                {
                    limpiar_imagen();
                    if (eliminar_work())
                    {
                        bool ifSaved = false;
                        OpenFileDialog dialog = new OpenFileDialog();
                        dialog.Filter = "Archivos de Imagen (*.tif, *.tiff) | *.tif; *.tiff";
                        dialog.InitialDirectory = @"C:\";
                        dialog.Title = "Abrir Imagen";

                        if (dialog.ShowDialog() == DialogResult.OK)
                        {
                            limpiar_imagen();
                            System.Drawing.Image actualBitmap_ = System.Drawing.Image.FromFile(dialog.FileName);
                            Guid objGuid = actualBitmap_.FrameDimensionsList[0];
                            System.Drawing.Imaging.FrameDimension objDimension = new System.Drawing.Imaging.FrameDimension(objGuid);
                            total_page = actualBitmap_.GetFrameCount(objDimension);

                            for (int i = 0; i < total_page; i++)
                            {
                                try
                                {
                                    actualBitmap_.SelectActiveFrame(objDimension, i);
                                    // image.Save(DestTiffile + "\\TIFSplit\\TifFile_" + activePage.ToString() + ".tif");
                                    actualBitmap_.Save(work_folder + i + ".tiff");
                                    comboBox1.Items.Add(i + 1);
                                    comboBox2.Items.Add(i + 1);
                                }
                                catch (Exception)
                                {
                                    ifSaved = false;
                                    comboBox1.Items.Clear();
                                    comboBox2.Items.Clear();
                                    return;
                                }
                            }
                            cambio_flecha = true;
                            comboBox1.Text = "1";
                            comboBox2.Text = "1";
                            pintar_imagen(1, 0);
                            cambio_flecha = false;
                            actualBitmap_.Dispose();
                            pageRange[0] = 0;
                            pageRange[1] = 2;
                            cargarImagen0000(pageRange, total_page);
                            label28.Text = total_page + " Páginas";
                            cargarPrincipal(pageRange[0]);
                            garbage_collector();
                        }
                        garbage_collector();
                    }
                }
            }
            else
            {
                if (eliminar_work())
                {
                    bool ifSaved = false;
                    OpenFileDialog dialog = new OpenFileDialog();
                    dialog.Filter = "Archivos de Imagen (*.tif, *.tiff) | *.tif; *.tiff";
                    dialog.InitialDirectory = @"C:\";
                    dialog.Title = "Abrir Imagen";

                    if (dialog.ShowDialog() == DialogResult.OK)
                    {
                        limpiar_imagen();
                        System.Drawing.Image actualBitmap_ = System.Drawing.Image.FromFile(dialog.FileName);
                        Guid objGuid = actualBitmap_.FrameDimensionsList[0];
                        System.Drawing.Imaging.FrameDimension objDimension = new System.Drawing.Imaging.FrameDimension(objGuid);
                        total_page = actualBitmap_.GetFrameCount(objDimension);

                        for (int i = 0; i < total_page; i++)
                        {
                            try
                            {
                                actualBitmap_.SelectActiveFrame(objDimension, i);
                                actualBitmap_.Save(work_folder + i + ".tiff", System.Drawing.Imaging.ImageFormat.Tiff);
                                comboBox1.Items.Add(i + 1);
                                comboBox2.Items.Add(i + 1);
                            }
                            catch (Exception)
                            {
                                ifSaved = false;
                                comboBox1.Items.Clear();
                                comboBox2.Items.Clear();
                                return;
                            }
                        }
                        cambio_flecha = true;
                        comboBox1.Text = "1";
                        comboBox2.Text = "1";
                        pintar_imagen(1,0);
                        cambio_flecha = false;
                        actualBitmap_.Dispose();
                        pageRange[0] = 0;
                        pageRange[1] = 2;
                        cargarImagen0000(pageRange, total_page);
                        label28.Text = total_page + " Páginas";
                        cargarPrincipal(pageRange[0]);
                        garbage_collector();
                    }
                    garbage_collector();
                }
            }
        }
        List<int> editadas = new List<int>();
        private void borrar_seleccion()
        {
            if (total_page <= 0)
            {
                return;
            }
            if (Rect.X >= -100 && Rect.Y >= -100)
            {
                File.Copy(work_folder + actual_page + ".tiff", work_folder + actual_page + "_editor.tiff", true);
                Bitmap actualBitmap_ = (Bitmap)System.Drawing.Image.FromFile(work_folder + actual_page + "_editor.tiff");

                Bitmap bitmap = new Bitmap(actualBitmap_, new Size((int)(actualBitmap_.Width), (int)(actualBitmap_.Height)));
                using (Graphics graphics = Graphics.FromImage(bitmap))
                {
                    int x_temp = Rect.X;
                    int y_temp = Rect.Y;
                    System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, Width, Height);
                    if (zoom_!=1F)
                    {
                        Rect.Width = (int)((float)Rect.Width/ zoom_);
                        Rect.Height = (int)((float)Rect.Height / zoom_);
                        
                        Rect.X= (int)((float)Rect.X / zoom_);
                        Rect.Y = (int)((float)Rect.Y / zoom_);
                    }
                    graphics.FillRectangle(new SolidBrush(System.Drawing.Color.White), Rect);
                    Rect.X = x_temp;
                    Rect.Y = y_temp;
                    Rect.Width = 0;
                    Rect.Height = 0;
                    Invalidate();
                }

                PageEdit.Image = null;

                if (pageRange[0] == actual_page)
                {
                    PageScreen1.Image = null;
                }
                if (pageRange[0] + 1 == actual_page)
                {
                    PageScreen2.Image = null;
                }
                if (pageRange[0] + 2 == actual_page)
                {
                    PageScreen3.Image = null;
                }
                actualBitmap_.Dispose();
                garbage_collector();
                FileInfo info = new FileInfo(work_folder + actual_page + ".tiff");
                FileInfo info1 = new FileInfo(work_folder + actual_page + "_editor.tiff");
                info.Delete();
                try
                {
                    info1.Delete();
                }
                catch (Exception)
                {

                }
                System.Drawing.Image img = bitmap;
                img.Save(work_folder + actual_page + ".tiff");
                editadas.Add(actual_page);
                cargarPrincipal(actual_page);
                if (pageRange[0] == actual_page)
                {
                    PageScreen1.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                    lblScreen1.Text = (actual_page + 1).ToString();
                }
                if (pageRange[0] + 1 == actual_page)
                {
                    PageScreen2.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                    lblScreen2.Text = (actual_page + 1).ToString();
                }
                if (pageRange[0] + 2 == actual_page)
                {
                    PageScreen3.Image = GetThumbnail_cambio(new Size(100, 100), work_folder + actual_page + ".tiff");
                    lblScreen3.Text = (actual_page + 1).ToString();
                }
                bitmap.Dispose();
                img.Dispose();
                actualBitmap_.Dispose();
                garbage_collector();
            }
        }
        private void btnBorrarSeleccion_Click(object sender, EventArgs e)
        {
            borrar_seleccion();
        }
        //fin lista imagenes



        public Size GetViewSize()
        {
            return this.PageEdit.Size;
        }
        private void garbage_collector()
        {
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }
        int pos_x = 0;
        int pos_y = 0;

        private void button29_Click(object sender, EventArgs e)
        {
            pos_x += 0;
            pos_y += 50;
            panel2.AutoScrollPosition = new Point(pos_x, pos_y);
        }
        
        public static byte[] ImageToByte(System.Drawing.Image img)
        {
            ImageConverter converter = new ImageConverter();
            return (byte[])converter.ConvertTo(img, typeof(byte[]));
        }

        private void cargarImagen0()
        {

            if (actualpage1<=numeroPaginas()-1)
            {
                actualBitmap1 = GetThumbnail(actualpage1, new Size(100, 100));
                PageScreen1.Image = actualBitmap1;
                lblScreen1.Text = (actualpage1 + 1).ToString();
            }
            else
            {
                actualBitmap1 = null;
                PageScreen1.Image = null;
                lblScreen1.Text = "";
            }

            if (actualpage2 <= numeroPaginas() - 1)
            {
                actualBitmap2 = GetThumbnail(actualpage2, new Size(100, 100));
                PageScreen2.Image = actualBitmap2;
                lblScreen2.Text = (actualpage2 + 1).ToString();
            }
            else
            {
                actualBitmap2 = null;
                PageScreen2.Image = null;
                lblScreen2.Text = "";
            }

            if (actualpage3 <= numeroPaginas() - 1)
            {
                actualBitmap3 = GetThumbnail(actualpage3, new Size(100, 100));
                PageScreen3.Image = actualBitmap3;
                lblScreen3.Text = (actualpage3 + 1).ToString();
            }
            else
            {
                actualBitmap3 = null;
                PageScreen3.Image = null;
                lblScreen3.Text = "";
            }

            if (actualpage1 <= numeroPaginas() - 1)
            {
                this.workingBitmap = GetWorkingImage1(GetViewSize(), actualpage1);
                this.PageEdit.Image = workingBitmap;
            }
            else
            {
                actualBitmap1 = null;
                PageScreen1.Image = null;
            }
            garbage_collector();
        }

        //por defecto
        public ScanOrfeo(USUARIO usuario)
        {
            usuarioScanOrfeo = usuario;
            InitializeComponent();
            foreach (var enc in ImageCodecInfo.GetImageEncoders())
            {
                if (enc.MimeType == "image/tiff") { _tiffCodecInfo = enc; break; }
            }
        }
        private void ScanOrfeo_Load(object sender, EventArgs e)
        {
            try
            {
                work_folder = config.AppSettings.Settings["WORKPATH"].Value;
            }
            catch (Exception)
            {
            }
            this.Icon = OrfeoScan_IDU_STRT.Properties.Resources.icon;
            tssl_valor_dependencia.Text = usuarioScanOrfeo.DEPE_CODI.ToString();
            tssl_valor_usuario.Text = usuarioScanOrfeo.USUA_NOMB.ToString();

           

            limpiar_imagen();
            ToolTip toolTip1 = new ToolTip();
            toolTip1.AutoPopDelay = 5000;
            toolTip1.InitialDelay = 1000;
            toolTip1.ReshowDelay = 500;
            toolTip1.ShowAlways = true;

            toolTip1.SetToolTip(this.btnStopScan, "Detener Captura");
            toolTip1.SetToolTip(this.btnStartCapture, "Iniciar Captura");
            toolTip1.SetToolTip(this.cBoxtRadicado, "Elija el Tipo de Radicado");
            toolTip1.SetToolTip(this.button2, "Imprimir Etiquetas");

            toolTip1.SetToolTip(this.btnNextScreen, "Siguiente Página");
            toolTip1.SetToolTip(this.btnPrevScreen, "Anterior Página");
            toolTip1.SetToolTip(this.btnEnviarPDF1, "Enviar Archivo");

            toolTip1.SetToolTip(this.button6, "Insertar antes de la página seleccionada");
            toolTip1.SetToolTip(this.button8, "Insertar después de la página seleccionada");
            toolTip1.SetToolTip(this.btnGirarDerecha, "Girar Página 90° a la Derecha");
            toolTip1.SetToolTip(this.btnGirarIzquierda, "Girar Página 90° a la Izquierda");
            toolTip1.SetToolTip(this.btnBorrarSeleccion, "Borrar Selección");
            toolTip1.SetToolTip(this.button17, "Eliminar Página Actual");
            toolTip1.SetToolTip(this.button12, "Reiniciar Imagen (borrar todas las imagenes)");
            toolTip1.SetToolTip(this.button18, "Guardar Imagen");
            toolTip1.SetToolTip(this.button5, "Abrir Imagen desde archivo");
            toolTip1.SetToolTip(this.button28, "Descargar Archivo Desde Servidor");
            toolTip1.SetToolTip(this.button15, "Guardar PDF");
            

            toolTip1.SetToolTip(this.PageScreen1, "Seleccionar Imagen");
            toolTip1.SetToolTip(this.PageScreen2, "Seleccionar Imagen");
            toolTip1.SetToolTip(this.PageScreen3, "Seleccionar Imagen");

            limpiar_anexos();
            cBoxtRadicado_load();
            int index_cBoxtRadicado = 0;
            foreach (var item in cBoxtRadicado.Items)
            {
                if (item.ToString() == "Entrada")
                {
                    cBoxtRadicado.SelectedIndex = index_cBoxtRadicado;
                }
                index_cBoxtRadicado++;
            }
            varConcat = "||";
            varSubstr = "substr";
            varRadi_Fech_radi = "TO_CHAR(a.RADI_FECH_RADI,'YYYYMM')";
            varFechaSistema = "sysdate";
            varIsNull = "nvl";
            DirTraB = config.AppSettings.Settings["DPATH"].Value;

            SetupTwain();
            foreach (var src in _twain)
            {
                var srcBtn = new ToolStripMenuItem(src.Name);
                srcBtn.Tag = src;
                srcBtn.Click += SourceMenuItem_Click;
               // srcBtn.Checked = _twain.CurrentSource != null && _twain.CurrentSource.Name == src.Name;
                srcBtn.Checked = false;
                seleccionarEscanerToolStripMenuItem.DropDownItems.Insert(0, srcBtn);
            }
            bool primerEscaner = true;

            foreach (var btn in seleccionarEscanerToolStripMenuItem.DropDownItems)
            {
                var srcBtn = btn as ToolStripMenuItem;
                var src = srcBtn.Tag as DataSource;
                if (src.Name== config.AppSettings.Settings["SCAN_NAME"].Value)
                {
                    if (src.Open() == ReturnCode.Success)
                    {
                        srcBtn.Checked = true;
                        btnStartCapture.Enabled = true;
                        LoadSourceCaps();
                        primerEscaner = false;
                    }
                }
            }
            foreach (var btn in seleccionarEscanerToolStripMenuItem.DropDownItems)
            {
                var srcBtn = btn as ToolStripMenuItem;
                var src = srcBtn.Tag as DataSource;
                if (primerEscaner)
                {
                    if (src.Open() == ReturnCode.Success)
                    {
                        srcBtn.Checked = true;
                        btnStartCapture.Enabled = true;
                        LoadSourceCaps();
                    }
                }
                primerEscaner = false;
            }
            List<string> administradores = new List<string>();
            administradores.Add("CAESLAVA2");
            administradores.Add("CLGARCIA8");
            administradores.Add("CJRODRI23");
            administradores.Add("CFROJASC1");
            foreach (var ad in administradores)
            {
                if (usuarioScanOrfeo.USUA_LOGIN.ToUpper() == ad)
                {
                    configuraciónToolStripMenuItem.Visible = true;
                }
            }
            
        }



        private void limpiar_anexos()
        {
            DateTime fechaAnexo = DateTime.Now.AddDays(1);
            dtFechaAnexo.Value = fechaAnexo;
            dtHoraAnexo.Value = fechaAnexo;
            txtObservaciones.Text = string.Empty;
            cBoxtDocumento.Items.Clear();
            cBoxtDocumento.Text = string.Empty;
            cargarTipoDocumental();

        }



        private void cargarTipoDocumental()
        {
            string IISQL = "select distinct a.SGD_TPR_CODIGO as cod, a.SGD_TPR_DESCRIP as des";
            IISQL += " FROM SGD_TPR_TPDCUMENTO a WHERE a.SGD_TPR_ESTADO=1 order by a.SGD_TPR_CODIGO ASC ";
            OracleConnection con = new OracleConnection(funciones.conni);
            try
            {
                con.Open();
                OracleCommand command = new OracleCommand(IISQL, con);
                using (OracleDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        int SGD_TPR_CODIGO = 0;
                        if (int.TryParse(reader[0].ToString(), out SGD_TPR_CODIGO))
                        {
                            if (reader[1]!=null)
                            {
                                cBoxtDocumento.Items.Add(SGD_TPR_CODIGO.ToString() + " " + (string)reader[1]);
                            }
                        }
                    }
                }
                funciones.desconectar(con);
            }
            catch (Exception ex)
            {
                funciones.desconectar(con);
            }
        }
        private void cBoxtRadicado_load()
        {
            cBoxtRadicado.Items.Clear();
            if (funciones.conexion_test(funciones.conni))
            {
                string sql = "SELECT SGD_TRAD_CODIGO, SGD_TRAD_DESCR FROM OW_ORFEO.SGD_TRAD_TIPORAD ORDER BY SGD_TRAD_CODIGO";
                OracleConnection con = new OracleConnection(funciones.conni);
                try
                {
                    con.Open();
                    OracleCommand command = new OracleCommand(sql, con);
                    using (OracleDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            int SGD_TRAD_CODIGO = 0;
                            if (int.TryParse(reader[0].ToString(), out SGD_TRAD_CODIGO))
                            {
                                cBoxtRadicado.Items.Add(SGD_TRAD_CODIGO.ToString() + " " + (string)reader[1]);
                            }
                        }
                    }

                    funciones.desconectar(con);
                }
                catch (Exception ex)
                {
                    funciones.desconectar(con);
                }
            }
        }
        private void buscarRadicadoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            InputBoxResult result = InputBox.Show("Digite el registro de radicado a consultar", "Consultar Radicado", temp_radicado, 100, 0);
            if (result.ReturnCode == DialogResult.OK)
            {
                if (result.Text.Length > 4)
                {
                    temp_radicado = result.Text;
                    if (!string.IsNullOrEmpty(usuarioScanOrfeo.DEPE_CODI.ToString().Trim()))
                        BuscarRadicado(result.Text);
                    else
                        MessageBox.Show("Debe seleccionar una dependencia a Buscar");
                }
                else
                    MessageBox.Show("El número de radicado debe tener más de 4 caracteres");
            }
        }
        private void buscarEnTodosLosRadicadoOExpedientesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            InputBoxResult result = InputBox.Show("Registro a Buscar", "Buscar Expediente", temp_expediente, 100, 0);
            if (result.ReturnCode == DialogResult.OK)
            {
                if (result.Text.Length > 4)
                {
                    temp_expediente = result.Text;
                    if (!string.IsNullOrEmpty(usuarioScanOrfeo.DEPE_CODI.ToString().Trim()))
                        BuscarRadicadoExpediente(result.Text);
                    else
                        MessageBox.Show("Debe seleccionar una dependencia a Buscar");
                }
                else
                    MessageBox.Show("El número de expediente debe tener más de 4 caracteres");
            }
        }
        private void BuscarRadicadoExpediente(string numradicado)
        {
            codbarras_private = null;
            limpiar_informacion_radicado();
            dataGridView1.DataSource = null;
            string IISQL;
            OracleConnection con = new OracleConnection(funciones.conni);
            IISQL = " SELECT 'EXPEDIENTE' as TIPO,S.DEPE_CODI AS DEPENDENCIA, S.SGD_EXP_NUMERO AS NÚMERO_EXPEDIENTE,(SELECT COUNT(*) FROM SGD_AEX_ANEXOEXPEDIENTE A WHERE A.SGD_AEX_EXPEDIENTE = S.SGD_EXP_NUMERO) AS NÚM_ANEXOS ,S.SGD_SEXP_PAREXP1 AS ASUNTO,S.SGD_SEXP_PAREXP3 AS NOMBRE_Y_DOCUMENTO,S.SGD_SEXP_FECH AS FECHA ";
            IISQL = IISQL + " ";
            IISQL = IISQL + " FROM SGD_SEXP_SECEXPEDIENTES S ";
            IISQL = IISQL + " WHERE S.SGD_EXP_NUMERO LIKE '%" + numradicado.Trim() + "%' ";
            IISQL = IISQL + " ORDER BY S.SGD_SEXP_FECH DESC ";
            try
            {
                con.Open();
                show_loading_panel(600, 177, 359, 20, "Cargando Registros");
                OracleCommand command = new OracleCommand(IISQL, con);
                OracleDataAdapter sda = new OracleDataAdapter(command);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                con.Dispose();
                dataGridView1.DataSource = dt;
                dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                con.Close();
                con.Dispose();
                MessageBox.Show(ex.ToString());
            }
            //System.Windows.Forms.Clipboard.SetText(IISQL);
        }
        private void BuscarRadicado(string numradicado)
        {
            codbarras_private = null;
            limpiar_informacion_radicado();
            dataGridView1.DataSource = null;
            string IISQL;
            OracleConnection con = new OracleConnection(funciones.conni);
            if (impresiónDeSobresToolStripMenuItem.Checked)
                IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_RADI AS NUMERO_RADICADO,a.RADI_FECH_RADI AS FECHA,renv.SGD_RENV_NOMBRE AS DESTINO,renv.SGD_RENV_DIR AS DIRECCIÓN,renv.SGD_RENV_DEPTO AS DEPARTAMENTO,renv.SGD_RENV_MPIO AS MUNICIPIO,a.RA_ASUN AS ASUNTO from Radicado a,dependencia b, sgd_renv_regenvio renv where a.RADI_DEPE_ACTU=b.DEPE_CODI AND a.RADI_NUME_RADI=renv.RADI_NUME_SAL AND a.RADI_CHAR_RADI LIKE '" + DateTime.Now.Year.ToString() + usuarioScanOrfeo.DEPE_CODI.ToString().Substring(0, 3) + "%'";
            else
                IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_HOJA PAGINAS,a.RADI_NUME_RADI NUMERO_RADICADO,a.RADI_FECH_RADI FECHA,a.RA_ASUN ASUNTO, a.RADI_DEPE_ACTU DEPENDENCIA_ACTUAL,a.RADI_PATH PATH  from Radicado a where a.radi_nume_radi is not null  ";

            IISQL += " and a.radi_char_radi like '%" + numradicado.Trim() + "%' ";



            //IISQL += " and (a.radi_char_radi = '20190000850961' or a.radi_char_radi = '20195260194683')";
            try
            {
                show_loading_panel(600, 177, 359, 20, "Cargando Registros");
                lblTipoEnvio.Text = "";
                btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(0, 255, 255, 255);
                btnEnviarPDF1.FlatAppearance.BorderSize = 0;
                label13.Visible = false;
                dtFechaAnexo.Visible = false;
                dtHoraAnexo.Visible = false;

                con.Open();
                OracleCommand command = new OracleCommand(IISQL, con);
                OracleDataAdapter sda = new OracleDataAdapter(command);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                con.Dispose();
                dataGridView1.DataSource = dt;
                dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                con.Close();
                con.Dispose();
                MessageBox.Show(ex.ToString());
            }
            //System.Windows.Forms.Clipboard.SetText(IISQL);
        }
        private void anexarImagenAUnRadicadoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!anexarImagenAUnRadicadoToolStripMenuItem.Checked)
            {
                Doc_Anexo = true;
            }
            else
            {
                Doc_Anexo = false;
            }
        }

        private void buscarSoloEnTipoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(cBoxtRadicado.Text.Trim()))
            {
                InputBoxResult result = InputBox.Show("Registro a Buscar Tipo de Radicacion " + cBoxtRadicado.Text, "Consultar Radicado por Tipo", temp_radicado, 100, 0);
                if (result.ReturnCode == DialogResult.OK)
                {
                    if (result.Text.Length > 4)
                    {
                        temp_radicado = result.Text;
                        if (!string.IsNullOrEmpty(usuarioScanOrfeo.DEPE_CODI.ToString().Trim()))
                            BuscarRadicadoTP(result.Text);
                        else
                            MessageBox.Show("Debe seleccionar una dependencia a Buscar");
                    }
                    else
                        MessageBox.Show("Introduzca mínimo 4 caracteres");
                }
            }
            else
                MessageBox.Show("Debe seleccionar un Tipo antes de iniciar la consulta");
        }
        private void BuscarRadicadoTP(string numradicado)
        {
            codbarras_private = null;
            limpiar_informacion_radicado();
            dataGridView1.DataSource = null;
            string IISQL;
            OracleConnection con = new OracleConnection(funciones.conni);
            if (impresiónDeSobresToolStripMenuItem.Checked)
                IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_HOJA PAGINAS,a.RADI_NUME_RADI NUMERO_RADICADO,a.RADI_FECH_RADI FECHA, a.RA_ASUN ASUNTO, a.RADI_DEPE_ACTU DEPENDENCIA_ACTUAL, a.RADI_PATH PATH, a.RADI_NOMB " + varConcat + " a.RADI_PRIM_APEL" + varConcat + " a.RADI_SEGU_APEL AS RADI_NOMB,renv.SGD_RENV_NOMBRE,renv.SGD_RENV_DIR,renv.SGD_RENV_DEPTO,renv.SGD_RENV_MPIO,a.RADI_USUA_ACTU,b.depe_nomb," + varRadi_Fech_radi + " as anomes_rad from Radicado a,dependencia b, sgd_renv_regenvio renv where a.RADI_DEPE_ACTU=b.DEPE_CODI AND a.RADI_NUME_RADI=renv.RADI_NUME_SAL  AND a.RADI_CHAR_RADI LIKE '" + DateTime.Now.Year.ToString() + usuarioScanOrfeo.DEPE_CODI.ToString().Substring(0, 3) + "%'";
            else
                IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_HOJA PAGINAS,a.RADI_NUME_RADI NUMERO_RADICADO,a.RADI_FECH_RADI FECHA, a.RA_ASUN ASUNTO, a.RADI_DEPE_ACTU DEPENDENCIA_ACTUAL,a.RADI_PATH PATH,a.RADI_USUA_ACTU USUARIO from Radicado a where a.radi_nume_radi is not null  ";
            IISQL = IISQL + " and a.radi_char_radi like '%" + numradicado.Trim() + "%' ";

            string tipoRad = cBoxtRadicado.Text.Trim().Substring(0, 1);
            IISQL = IISQL + " and " + varSubstr + "(radi_char_radi,5,3) =  '" + usuarioScanOrfeo.DEPE_CODI.ToString().Substring(0, 3) + "'";
            IISQL = IISQL + " and a.radi_char_radi like '%" + tipoRad + "'";
            try
            {
                show_loading_panel(600, 177, 359, 20, "Cargando Registros");
                lblTipoEnvio.Text = "";
                btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(0, 255, 255, 255);
                btnEnviarPDF1.FlatAppearance.BorderSize = 0;
                label13.Visible = false;
                dtFechaAnexo.Visible = false;
                dtHoraAnexo.Visible = false;
                con.Open();
                OracleCommand command = new OracleCommand(IISQL, con);
                OracleDataAdapter sda = new OracleDataAdapter(command);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                con.Dispose();
                dataGridView1.DataSource = dt;
                dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                con.Close();
                con.Dispose();
                MessageBox.Show(ex.ToString());
            }
            //System.Windows.Forms.Clipboard.SetText(IISQL);
        }
        private void buscarEnTodosLosRadicadosMasivaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            InputBoxResult result = InputBox.Show("Registro a Buscar Tipo de Radicacion Masiva, Digite el nombre exacto del Grupo de masiva o el PRIMER NUMERO DE RADICADO DEL GRUPO que ha enviado ", "Consultar Radicado por Masiva", string.Empty, 100, 0);
            if (result.ReturnCode == DialogResult.OK)
            {
                if (result.Text.Length > 4)
                {
                    if (!string.IsNullOrEmpty(usuarioScanOrfeo.DEPE_CODI.ToString().Trim()))
                        BuscarRadicadoMasiva(result.Text);
                    else
                        MessageBox.Show("Debe seleccionar una dependencia a Buscar");
                }
                else
                    MessageBox.Show("Introduzca mínimo 4 caracteres");
            }
        }
        private void BuscarRadicadoMasiva(string numradicado)
        {
            codbarras_private = null;
            limpiar_informacion_radicado();
            dataGridView1.DataSource = null;
            string IISQL = string.Empty;
            OracleConnection con = new OracleConnection(funciones.conni);
            if (impresiónDeSobresToolStripMenuItem.Checked)
            {
                IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_HOJA PAGINAS, a.RADI_NUME_RADI AS NUMERO_RADICADO, a.RADI_FECH_RADI AS FECHA,a.RA_ASUN ASUNTO, CONCAT(CONCAT(CONCAT(CONCAT(a.RADI_NOMB , ' '), a.RADI_PRIM_APEL),' '), a.RADI_SEGU_APEL) AS RADI_NOMB,a.RADI_DEPE_ACTU as DEPENDENCIA_ACTUAL,renv.SGD_RENV_NOMBRE,renv.SGD_RENV_DIR,renv.SGD_RENV_DEPTO,renv.SGD_RENV_MPIO,a.RADI_USUA_ACTU AS USUARIO,b.depe_nomb," + varRadi_Fech_radi + " as anomes_rad from Radicado a,dependencia b, sgd_renv_regenvio renv where a.RADI_DEPE_ACTU=b.DEPE_CODI AND a.RADI_NUME_RADI=renv.RADI_NUME_SAL  ";
                IISQL = IISQL + " and renv.radi_nume_grupo like '" + numradicado.Trim() + "' ";
            }
            if (!string.IsNullOrEmpty(IISQL))
            {
                try
                {
                    show_loading_panel(600, 177, 359, 20, "Cargando Registros");
                    lblTipoEnvio.Text = "";
                    btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(0, 255, 255, 255);
                    btnEnviarPDF1.FlatAppearance.BorderSize = 0;
                    label13.Visible = false;
                    dtFechaAnexo.Visible = false;
                    dtHoraAnexo.Visible = false;
                    con.Open();
                    OracleCommand command = new OracleCommand(IISQL, con);
                    OracleDataAdapter sda = new OracleDataAdapter(command);
                    DataTable dt = new DataTable();
                    sda.Fill(dt);
                    con.Close();
                    con.Dispose();
                    dataGridView1.DataSource = dt;
                    dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                    hide_loading_panel();
                }
                catch (Exception ex)
                {
                    hide_loading_panel();
                    con.Close();
                    con.Dispose();
                    MessageBox.Show(ex.ToString());
                }
                //System.Windows.Forms.Clipboard.SetText(IISQL);
            }
        }
        private void guardarImagenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            GuardarImagen();
        }
        private void GuardarImagen()
        {
            saveFileDialog1.InitialDirectory = @"C:\";
            saveFileDialog1.RestoreDirectory = true;
            saveFileDialog1.Title = "Browse Text Files";
            saveFileDialog1.DefaultExt = "tiff";
            saveFileDialog1.Filter = "Archivos de Imagen (*.tif, *.tiff) | *.tif; *.tiff";
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string nombreArchivo = saveFileDialog1.FileName;
                guardarTiffActual(nombreArchivo);
            }
        }
        private void configuraciónToolStripMenuItem_Click(object sender, EventArgs e)
        {
            configuracion frm = new configuracion();
            frm.Show();
        }
        private void imprimirImagenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //Show print dialog
            PrintDialog pd = new PrintDialog();
            PrintDocument doc = new PrintDocument();
            doc.PrintPage += Doc_PrintPage;
            pd.Document = doc;
            if (pd.ShowDialog() == DialogResult.OK)
                doc.Print();
        }
        private void Doc_PrintPage(object sender, PrintPageEventArgs e)
        {
            //Print image
            Bitmap bm = new Bitmap(816, 1056);
            PageEdit.DrawToBitmap(bm, new System.Drawing.Rectangle(0, 0, PageEdit.Width, PageEdit.Height));
            e.Graphics.DrawImage(bm, 0, 0);
            bm.Dispose();
        }
        private void preparar_pagina(PictureBox picture)
        {
            //PageEdit.Image = null;
            picture.Image = null;
        }
        private void cargar_pagina(string path, PictureBox picture)
        {
            //picture.Image =;
        }


       





        private void numericUpDown2_ValueChanged(object sender, EventArgs e)
        {

        }

        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        
        
        private List<System.Drawing.Image> Split(string pstrInputFilePath)
        {
            List<System.Drawing.Image> cargar = new List<System.Drawing.Image>();
            System.Drawing.Image tiffImage = System.Drawing.Image.FromFile(pstrInputFilePath);
            Guid objGuid = tiffImage.FrameDimensionsList[0];
            FrameDimension dimension = new FrameDimension(objGuid);
            int noOfPages = tiffImage.GetFrameCount(dimension);

            ImageCodecInfo encodeInfo = null;
            ImageCodecInfo[] imageEncoders = ImageCodecInfo.GetImageEncoders();
            for (int j = 0; j < imageEncoders.Length; j++)
            {
                if (imageEncoders[j].MimeType == "image/tiff")
                {
                    encodeInfo = imageEncoders[j];
                    break;
                }
            }

            foreach (Guid guid in tiffImage.FrameDimensionsList)
            {
                for (int index = 0; index < noOfPages; index++)
                {
                    FrameDimension currentFrame = new FrameDimension(guid);
                    tiffImage.SelectActiveFrame(currentFrame, index);
                    Bitmap nextFrame = new Bitmap(tiffImage);
                    cargar.Add(nextFrame);
                }
            }
            return cargar;
        }
        private void cargarImagen(List<System.Drawing.Image> imagenes, int[] range, bool inicial)
        {
            TiffCarga.Clear();
            foreach (var imagen in imagenes)
            {
                Bitmap nextFrame = new Bitmap(imagen);
                TiffCarga.Add(nextFrame);
            }
            paginaActual = 1;

            bool pageEmpty1 = true;
            bool pageEmpty2 = true;
            bool pageEmpty3 = true;

            for (int i = range[0]; i < range[1] + 1; i++)
            {
                bool asigno = false;
                if (pageEmpty1 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen1.Image = TiffCarga[i];
                        lblScreen1.Text = pref_pag + (i + 1).ToString();
                        pageEmpty1 = false;
                        asigno = true;
                    }
                }
                if (pageEmpty2 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen2.Image = TiffCarga[i];
                        lblScreen2.Text = pref_pag + (i + 1).ToString();
                        pageEmpty2 = false;
                        asigno = true;
                    }
                }
                if (pageEmpty3 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen3.Image = TiffCarga[i];
                        lblScreen3.Text = pref_pag + (i + 1).ToString();
                        pageEmpty3 = false;
                        asigno = true;
                    }
                }
            }
            if (pageEmpty1)
            {
                PageScreen1.Image = null;
                lblScreen1.Text = "";
            }

            if (pageEmpty2)
            {
                PageScreen2.Image = null;
                lblScreen2.Text = "";
            }

            if (pageEmpty3)
            {
                PageScreen3.Image = null;
                lblScreen3.Text = "";
            }

            if (inicial && TiffCarga.Count >= 1)
                PageEdit.Image = TiffCarga[0];
        }
        private void cargarImagen1(int[] range)
        {

            bool pageEmpty1 = true;
            bool pageEmpty2 = true;
            bool pageEmpty3 = true;

            for (int i = range[0]; i < range[1] + 1; i++)
            {
                bool asigno = false;
                if (pageEmpty1 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen1.Image = TiffCarga[i];
                        lblScreen1.Text = pref_pag + (i + 1).ToString();
                        pageEmpty1 = false;
                        asigno = true;
                    }
                }
                if (pageEmpty2 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen2.Image = TiffCarga[i];
                        lblScreen2.Text = pref_pag + (i + 1).ToString();
                        pageEmpty2 = false;
                        asigno = true;
                    }
                }
                if (pageEmpty3 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen3.Image = TiffCarga[i];
                        lblScreen3.Text = pref_pag + (i + 1).ToString();
                        pageEmpty3 = false;
                        asigno = true;
                    }
                }
            }
            if (pageEmpty1)
            {
                PageScreen1.Image = null;
                lblScreen1.Text = "";
            }

            if (pageEmpty2)
            {
                PageScreen2.Image = null;
                lblScreen2.Text = "";
            }

            if (pageEmpty3)
            {
                PageScreen3.Image = null;
                lblScreen3.Text = "";
            }
        }
        
        private void cargarImagen2(int[] range, string path)
        {

            bool pageEmpty1 = true;
            bool pageEmpty2 = true;
            bool pageEmpty3 = true;

            for (int i = range[0]; i < range[1] + 1; i++)
            {
                bool asigno = false;
                if (pageEmpty1 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen1.Image = TiffCarga[i];
                        lblScreen1.Text = pref_pag + (i + 1).ToString();
                        pageEmpty1 = false;
                        asigno = true;
                    }
                }
                if (pageEmpty2 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen2.Image = TiffCarga[i];
                        lblScreen2.Text = pref_pag + (i + 1).ToString();
                        pageEmpty2 = false;
                        asigno = true;
                    }
                }
                if (pageEmpty3 && !asigno)
                {
                    if (TiffCarga.Count >= i + 1)
                    {
                        PageScreen3.Image = TiffCarga[i];
                        lblScreen3.Text = pref_pag + (i + 1).ToString();
                        pageEmpty3 = false;
                        asigno = true;
                    }
                }
            }
            if (pageEmpty1)
            {
                PageScreen1.Image = null;
                lblScreen1.Text = "";
            }

            if (pageEmpty2)
            {
                PageScreen2.Image = null;
                lblScreen2.Text = "";
            }

            if (pageEmpty3)
            {
                PageScreen3.Image = null;
                lblScreen3.Text = "";
            }
        }
        private void button7_Click(object sender, EventArgs e)
        {
            try
            {
                using (var client = new WebClient())
                {
                    client.Credentials = new NetworkCredential(digitalizador_user, digitalizador);
                    client.UploadFile("ftp://fs04cc01/bodega_dev_of01/hello_A1_b_cs.pdf", WebRequestMethods.Ftp.UploadFile, @"D:\hello_A1_b_cs.pdf");
                    MessageBox.Show("El archivo se subió correctamente");
                }
                var request = (FtpWebRequest)WebRequest.Create("ftp://fs04cc01/bodega_dev_of01/hello_A1_b_cs.pdf");
                request.Credentials = new NetworkCredential(digitalizador_user, digitalizador);
                request.Method = WebRequestMethods.Ftp.GetFileSize;

                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    MessageBox.Show("El archivo se subió correctamente");
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (response.StatusCode ==
                        FtpStatusCode.ActionNotTakenFileUnavailable)
                    {
                        MessageBox.Show("El archivo no se subió correctamente, por favor vuelva a intentar");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void pintar_imagen(int page, int pageNumber)
        {
            lblScreen1.BackColor = System.Drawing.Color.DarkOrange;
            lblScreen2.BackColor = System.Drawing.Color.DarkOrange;
            lblScreen3.BackColor = System.Drawing.Color.DarkOrange;

            if (page == 1)
                lblScreen1.BackColor = System.Drawing.Color.Black;
            if (page == 2)
                lblScreen2.BackColor = System.Drawing.Color.Black;
            if (page == 3)
                lblScreen3.BackColor = System.Drawing.Color.Black;

        }


        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void show_loading_panel(int size_x, int size_y, int loc_x, int loc_y, string texto)
        {
            pan_loading.Location = new Point(loc_x, loc_y);
            pan_loading.Size = new Size(size_x, size_y);
            pan_loading.Visible = true;
            pan_loading.Enabled = true;
            label1.Text = texto;
            pan_loading.Refresh();
        }
        private void hide_loading_panel()
        {
            pan_loading.Location = new Point(0, 0);
            pan_loading.Size = new Size(1, 1);
            pan_loading.Visible = false;
            pan_loading.Enabled = false;
            label1.Text = "";
            pan_loading.Refresh();
        }
        public byte[] MergeTiff()
        {
            byte[] tiffMerge = null;
            using (var msMerge = new MemoryStream())
            {
                //get the codec for tiff files
                ImageCodecInfo ici = null;
                foreach (ImageCodecInfo i in ImageCodecInfo.GetImageEncoders())
                    if (i.MimeType == "image/tiff")
                        ici = i;

                Encoder enc = Encoder.SaveFlag;
                EncoderParameters ep = new EncoderParameters(1);

                Bitmap pages = null;
                int frame = 0;

                for (int i = 0; i < total_page; i++)
                {
                    using (System.Drawing.Image tiffImage = System.Drawing.Image.FromFile(work_folder + @"\" + i + ".tiff"))
                    {
                        foreach (Guid guid in tiffImage.FrameDimensionsList)
                        {
                            FrameDimension dimension = new FrameDimension(guid);
                            int noOfPages = tiffImage.GetFrameCount(dimension);

                            for (int index = 0; index < noOfPages; index++)
                            {
                                FrameDimension currentFrame = new FrameDimension(guid);
                                tiffImage.SelectActiveFrame(currentFrame, index);
                                using (MemoryStream tempImg = new MemoryStream())
                                {
                                    tiffImage.Save(tempImg, ImageFormat.Tiff);
                                    {
                                        if (frame == 0)
                                        {
                                            pages = (Bitmap)System.Drawing.Image.FromStream(tempImg);
                                            ep.Param[0] = new EncoderParameter(enc, (long)EncoderValue.MultiFrame);
                                            pages.Save(msMerge, ici, ep);
                                        }
                                        else
                                        {
                                            ep.Param[0] = new EncoderParameter(enc, (long)EncoderValue.FrameDimensionPage);
                                            pages.SaveAdd((Bitmap)System.Drawing.Image.FromStream(tempImg), ep);
                                        }
                                    }
                                    frame++;
                                }
                                garbage_collector();
                            }
                            garbage_collector();
                        }
                    }
                    garbage_collector();
                }

                //foreach (var tiffFile in tiffFiles)
                //{
                //    using (var imageStream = new MemoryStream(tiffFile))
                //    {
                //        using (System.Drawing.Image tiffImage = System.Drawing.Image.FromStream(imageStream))
                //        {
                //            foreach (Guid guid in tiffImage.FrameDimensionsList)
                //            {
                //                FrameDimension dimension = new FrameDimension(guid);
                //                int noOfPages = tiffImage.GetFrameCount(dimension);

                //                for (int index = 0; index < noOfPages; index++)
                //                {
                //                    FrameDimension currentFrame = new FrameDimension(guid);
                //                    tiffImage.SelectActiveFrame(currentFrame, index);
                //                    using (MemoryStream tempImg = new MemoryStream())
                //                    {
                //                        tiffImage.Save(tempImg, ImageFormat.Tiff);
                //                        {
                //                            if (frame == 0)
                //                            {
                //                                pages = (Bitmap)System.Drawing.Image.FromStream(tempImg);
                //                                ep.Param[0] = new EncoderParameter(enc, (long)EncoderValue.MultiFrame);
                //                                pages.Save(msMerge, ici, ep);
                //                            }
                //                            else
                //                            {
                //                                ep.Param[0] = new EncoderParameter(enc, (long)EncoderValue.FrameDimensionPage);
                //                                pages.SaveAdd((Bitmap)System.Drawing.Image.FromStream(tempImg), ep);
                //                            }
                //                        }
                //                        frame++;
                //                    }
                //                    garbage_collector();
                //                }
                //                garbage_collector();
                //            }
                //        }
                //    }
                //    garbage_collector();
                //}
                if (frame > 0)
                {
                    ep.Param[0] = new EncoderParameter(enc, (long)EncoderValue.Flush);
                    pages.SaveAdd(ep);
                }

                msMerge.Position = 0;
                tiffMerge = msMerge.ToArray();
            }
            return tiffMerge;
        }
        public byte[] ImageToByteArray(System.Drawing.Image imageIn)
        {
            using (var ms = new MemoryStream())
            {
                imageIn.Save(ms, imageIn.RawFormat);
                garbage_collector();
                return ms.ToArray();
            }
            
        }


        //Metodos y funciones para Escaner
        #region scanner  
        protected override void OnHandleCreated(EventArgs e)
        {
            base.OnHandleCreated(e);
            SetupTwain();
        }
        private bool twain_scan = false;
        private void SetupTwain()
        {
            var appId = TWIdentity.CreateFromAssembly(DataGroups.Image, Assembly.GetEntryAssembly());
            _twain = new TwainSession(appId);
            _twain.StateChanged += (s, e) =>
            {
                PlatformInfo.Current.Log.Info("State changed to " + _twain.State + " on thread " + Thread.CurrentThread.ManagedThreadId);
            };
            _twain.TransferError += (s, e) =>
            {
                PlatformInfo.Current.Log.Info("Got xfer error on thread " + Thread.CurrentThread.ManagedThreadId);
            };
            _twain.DataTransferred += (s, e) =>
            {
                PlatformInfo.Current.Log.Info("Transferred data event on thread " + Thread.CurrentThread.ManagedThreadId);
                twain_scan = true;
                // example on getting ext image info
                var infos = e.GetExtImageInfo(ExtendedImageInfo.Camera).Where(it => it.ReturnCode == ReturnCode.Success);
                foreach (var it in infos)
                {
                    var values = it.ReadValues();
                    PlatformInfo.Current.Log.Info(string.Format("{0} = {1}", it.InfoID, values.FirstOrDefault()));
                    break;
                }
                // handle image data
                System.Drawing.Image img = null;
                if (e.NativeData != IntPtr.Zero)
                {
                    var stream = e.GetNativeImageStream();
                    if (stream != null)
                    {
                        if (Es_inicial)
                        {
                            if (total_page == -1)
                            {
                                total_page = 0;
                            }
                            using (System.Drawing.Image image = System.Drawing.Image.FromStream(stream))
                            {
                                total_page++;
                                image.Save(work_folder + (total_page - 1).ToString() + ".tiff");
                                comboBox1.Items.Add(total_page.ToString());
                                comboBox2.Items.Add(total_page.ToString());
                                label28.Text = total_page + " Páginas";
                                garbage_collector();
                            }
                        }
                        else
                        {
                            TiffCarga.Add(System.Drawing.Image.FromStream(stream));
                            garbage_collector();
                        }
                    }
                }
                else if (!string.IsNullOrEmpty(e.FileDataPath))
                {
                    img = new Bitmap(e.FileDataPath);
                    garbage_collector();
                }
                if (img != null)
                {
                    this.BeginInvoke(new Action(() =>
                    {
                        garbage_collector();
                    }));
                }
            };
            _twain.SourceDisabled += (s, e) =>
            {
                PlatformInfo.Current.Log.Info("Source disabled event on thread " + Thread.CurrentThread.ManagedThreadId);
                this.BeginInvoke(new Action(() =>
                {
                    //Termina la accion
                    if (twain_scan)
                    {
                        if (total_page > 0)
                        {
                            if (Es_inicial)
                            {
                                cambio_flecha = true;
                                comboBox1.Text = "1";
                                comboBox2.Text = "1";
                                pintar_imagen(1, 0);
                                cambio_flecha = false;

                                pageRange[0] = 0;
                                pageRange[1] = 2;
                                cargarImagen0000(pageRange, total_page);
                                label28.Text = total_page + " Páginas";
                                cargarPrincipal(pageRange[0]);
                                garbage_collector();

                                btnStopScan.Enabled = false;
                                btnStopScan.Visible = false;
                                btnStartCapture.Enabled = true;
                                btnStartCapture.Visible = true;
                                LoadSourceCaps();
                                garbage_collector();
                            }
                            else
                            {
                                PageScreen1.Image = null;
                                PageScreen2.Image = null;
                                PageScreen3.Image = null;
                                PageEdit.Image = null;
                                lblScreen1.Text = "";
                                lblScreen2.Text = "";
                                lblScreen3.Text = "";
                                comboBox1.Text = "";
                                comboBox1.Items.Clear();
                                comboBox2.Text = "";
                                comboBox2.Items.Clear();
                                label28.Text = "";
                                garbage_collector();
                                total_page = 0;

                                int paginas_nuevas = 0;

                                if (agregar_behind)
                                {
                                    //Insertar atras
                                    if (Directory.Exists(work_folder))
                                    {
                                        DirectoryInfo di = new System.IO.DirectoryInfo(work_folder);
                                        foreach (FileInfo file in di.GetFiles())
                                        {
                                            string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                            int numero_pag = -1;
                                            if (int.TryParse(woe, out numero_pag))
                                            {
                                                if (numero_pag >= actual_page)
                                                {
                                                    System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + woe + "_edit.tiff");
                                                    file.Delete();
                                                }
                                            }
                                        }

                                        foreach (FileInfo file in di.GetFiles())
                                        {
                                            string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                            woe = woe.Replace("_edit", "");
                                            int numero_pag = -1;
                                            if (int.TryParse(woe, out numero_pag))
                                            {
                                                if (numero_pag >= actual_page)
                                                {
                                                    numero_pag += TiffCarga.Count();
                                                    System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + numero_pag + ".tiff");
                                                }
                                                paginas_nuevas++;
                                                total_page++;
                                                comboBox1.Items.Add(paginas_nuevas);
                                                comboBox2.Items.Add(paginas_nuevas);
                                            }
                                        }
                                        label28.Text = total_page + " Páginas";
                                    }
                                    int actual_page_copy = actual_page;
                                    for (int i = 0; i < TiffCarga.Count(); i++)
                                    {
                                        try
                                        {
                                            TiffCarga[i].Save(work_folder + actual_page_copy + ".tiff");
                                            actual_page_copy++;
                                            total_page++;
                                            paginas_nuevas++;
                                            comboBox1.Items.Add(paginas_nuevas);
                                            comboBox2.Items.Add(paginas_nuevas);
                                        }
                                        catch (Exception)
                                        {
                                            comboBox1.Items.Clear();
                                            comboBox2.Items.Clear();
                                            return;
                                        }
                                    }
                                    label28.Text = total_page + " Páginas";
                                }
                                else
                                {
                                    //Insertar Adelante
                                    if (Directory.Exists(work_folder))
                                    {
                                        DirectoryInfo di = new System.IO.DirectoryInfo(work_folder);
                                        foreach (FileInfo file in di.GetFiles())
                                        {
                                            string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                            int numero_pag = -1;
                                            if (int.TryParse(woe, out numero_pag))
                                            {
                                                if (numero_pag > actual_page)
                                                {
                                                    System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + woe + "_edit.tiff");
                                                    file.Delete();
                                                }
                                            }
                                        }

                                        foreach (FileInfo file in di.GetFiles())
                                        {
                                            string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                            woe = woe.Replace("_edit", "");
                                            int numero_pag = -1;
                                            if (int.TryParse(woe, out numero_pag))
                                            {
                                                if (numero_pag > actual_page)
                                                {
                                                    numero_pag += TiffCarga.Count();
                                                    System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + numero_pag + ".tiff");
                                                }
                                                paginas_nuevas++;
                                                total_page++;
                                                comboBox1.Items.Add(paginas_nuevas);
                                                comboBox2.Items.Add(paginas_nuevas);
                                            }
                                        }
                                        label28.Text = total_page + " Páginas";
                                    }
                                    int actual_page_copy = actual_page + 1;
                                    for (int i = 0; i < TiffCarga.Count(); i++)
                                    {
                                        try
                                        {
                                            TiffCarga[i].Save(work_folder + actual_page_copy + ".tiff");
                                            actual_page_copy++;
                                            total_page++;
                                            paginas_nuevas++;
                                            comboBox1.Items.Add(paginas_nuevas);
                                            comboBox2.Items.Add(paginas_nuevas);
                                        }
                                        catch (Exception)
                                        {
                                            comboBox1.Items.Clear();
                                            comboBox2.Items.Clear();
                                            return;
                                        }
                                    }
                                    label28.Text = total_page + " Páginas";
                                }





                                cambio_flecha = true;
                                comboBox1.Text = (actual_page + 1).ToString();
                                comboBox2.Text = (actual_page + 1).ToString();
                                label28.Text = total_page + " Páginas";
                                pintar_imagen(1, actual_page);
                                cambio_flecha = false;
                                foreach (var item in TiffCarga)
                                {
                                    item.Dispose();
                                }
                                TiffCarga.Clear();
                                pageRange[0] = actual_page;
                                pageRange[1] = actual_page + 2;
                                cargarImagen0000(pageRange, total_page);
                                cargarPrincipal(actual_page);
                                garbage_collector();

                                btnStopScan.Enabled = false;
                                btnStopScan.Visible = false;
                                btnStartCapture.Enabled = true;
                                btnStartCapture.Visible = true;
                                LoadSourceCaps();
                                garbage_collector();
                            }


                        }
                        else
                        {
                            cambio_flecha = true;
                            comboBox1.Text = "1";
                            comboBox2.Text = "1";
                            pintar_imagen(1, 0);
                            cambio_flecha = false;

                            pageRange[0] = 0;
                            pageRange[1] = 2;
                            cargarImagen0000(pageRange, total_page);
                            label28.Text = total_page + " Páginas";
                            cargarPrincipal(pageRange[0]);
                            garbage_collector();

                            btnStopScan.Enabled = false;
                            btnStopScan.Visible = false;
                            btnStartCapture.Enabled = true;
                            btnStartCapture.Visible = true;
                            LoadSourceCaps();
                            garbage_collector();
                        }
                    }
                    //if (dataGridView1.Rows.Count>0)
                    //{
                    //    if (dataGridView1.CurrentRow.Cells[2].Value != null)
                    //    {
                    //        string documento = dataGridView1.CurrentRow.Cells[2].Value.ToString();
                    //        string tipo = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                    //        if (documento.Length==14 || documento.Length == 19)
                    //        {
                    //            limpiar_imagen();
                    //            var merge = MergeTiff(streamer);
                    //            string path = ConfigurationManager.AppSettings["DPATH"] + @"/temp/" + documento + "_" + DateTime.Now.ToString("yyyyMMdd_hhmmss") + ".tif";
                    //            System.IO.File.WriteAllBytes(path, merge);
                    //            TiffImage(path);
                    //            if (actualBitmap != null)
                    //            {
                    //                this.workingBitmap = GetWorkingImage(GetViewSize());
                    //                this.PageEdit.Image = workingBitmap;
                    //                for (int i = 1; i < numeroPaginas() + 1; i++)
                    //                {
                    //                    comboBox1.Items.Add(i);
                    //                    garbage_collector();
                    //                }
                    //                cambio_flecha = true;
                    //                comboBox1.Text = "1";
                    //                cambio_flecha = false;
                    //                if (numeroPaginas()>=1)
                    //                {
                    //                    actualBitmap1 = GetThumbnail(0, new Size(100, 100));
                    //                }
                    //                if (numeroPaginas() >= 2)
                    //                {
                    //                    actualBitmap2 = GetThumbnail(1, new Size(100, 100));
                    //                }
                    //                if (numeroPaginas() >= 3)
                    //                {
                    //                    actualBitmap3 = GetThumbnail(2, new Size(100, 100));
                    //                }
                    //                PageScreen1.Image = actualBitmap1;
                    //                PageScreen2.Image = actualBitmap2;
                    //                PageScreen3.Image = actualBitmap3;
                    //                cargarImagen0();
                    //            }
                    //        }
                    //    }
                    //}
                }));
            };
            _twain.TransferReady += (s, e) =>
            {
                PlatformInfo.Current.Log.Info("Transferr ready event on thread " + Thread.CurrentThread.ManagedThreadId);
                e.CancelAll = _stopScan;
            };

            // either set sync context and don't worry about threads during events,
            // or don't and use control.invoke during the events yourself
            PlatformInfo.Current.Log.Info("Setup thread = " + Thread.CurrentThread.ManagedThreadId);
            _twain.SynchronizationContext = SynchronizationContext.Current;
            if (_twain.State < 3)
            {
                // use this for internal msg loop
                _twain.Open();
                // use this to hook into current app loop
                //_twain.Open(new WindowsFormsMessageLoopHook(this.Handle));
            }
        }
        void SourceMenuItem_Click(object sender, EventArgs e)
        {
            // do nothing if source is enabled
            if (_twain.State > 4) { return; }

            if (_twain.State == 4) { _twain.CurrentSource.Close(); }

            foreach (var btn in seleccionarEscanerToolStripMenuItem.DropDownItems)
            {
                var srcBtn = btn as ToolStripMenuItem;
                if (srcBtn != null) { srcBtn.Checked = false; }
            }

            var curBtn = (sender as ToolStripMenuItem);
            var src = curBtn.Tag as DataSource;
            if (src.Open() == ReturnCode.Success)
            {
                Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
                if (!string.IsNullOrWhiteSpace(src.Name))
                {
                    config.AppSettings.Settings["SCAN_NAME"].Value = src.Name;
                    config.Save(ConfigurationSaveMode.Modified);
                    ConfigurationManager.RefreshSection("appSettings");
                }
                curBtn.Checked = true;
                btnStartCapture.Enabled = true;
                LoadSourceCaps();
            }
        }
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            if (_twain != null)
            {
                if (e.CloseReason == CloseReason.UserClosing && _twain.State > 4)
                {
                    e.Cancel = true;
                }
                else
                {
                    CleanupTwain();
                }
            }
            base.OnFormClosing(e);
        }
        private void CleanupTwain()
        {
            if (_twain.State == 4)
            {
                _twain.CurrentSource.Close();
            }
            if (_twain.State == 3)
            {
                _twain.Close();
            }

            if (_twain.State > 2)
            {
                // normal close down didn't work, do hard kill
                _twain.ForceStepDown(2);
            }
        }
        private void configurarEscanerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                _twain.CurrentSource.Enable(SourceEnableMode.ShowUIOnly, true, this.Handle);
            }
            catch (Exception)
            {
                MessageBox.Show("Asegurese que exista un escaner conectado y encendido para iniciar la configuración");
            }
            
        }
        private void btnStartCapture_Click(object sender, EventArgs e)
        {
            twain_scan = true;
            adicionar_scan = -1;

            if (total_page > 0)
            {
                Es_inicial = false;
            }
            else
            {
                if (!eliminar_work())
                {
                    return;
                }
            }
            if (_twain.State == 4)
            {
                //_twain.CurrentSource.CapXferCount.Set(4);

                _stopScan = false;

                //if (total_page>0)
                //{
                //    PageScreen1.Image = null;
                //    PageScreen2.Image = null;
                //    PageScreen3.Image = null;
                //    PageEdit.Image = null;
                //    lblScreen1.Text = "";
                //    lblScreen2.Text = "";
                //    lblScreen3.Text = "";
                //    comboBox1.Text = "";
                //    comboBox1.Items.Clear();
                //    garbage_collector();
                //    total_page = 0;


                //}
                //else
                //{
                //    PageScreen1.Image = null;
                //    PageScreen2.Image = null;
                //    PageScreen3.Image = null;
                //    PageEdit.Image = null;
                //    lblScreen1.Text = "";
                //    lblScreen2.Text = "";
                //    lblScreen3.Text = "";
                //    comboBox1.Text = "";
                //    comboBox1.Items.Clear();
                //    garbage_collector();
                //    total_page = 0;



                //}


                if (_twain.CurrentSource.Capabilities.CapUIControllable.IsSupported)//.SupportedCaps.Contains(CapabilityId.CapUIControllable))
                {
                    // hide scanner ui if possible
                    if (_twain.CurrentSource.Enable(SourceEnableMode.ShowUI, false, this.Handle) == ReturnCode.Success)
                    {
                        btnStopScan.Enabled = true;
                        btnStopScan.Visible = true;
                        btnStartCapture.Enabled = false;
                        btnStartCapture.Visible = false;
                    }
                }
                else
                {
                    if (_twain.CurrentSource.Enable(SourceEnableMode.ShowUI, true, this.Handle) == ReturnCode.Success)
                    {
                        btnStopScan.Enabled = true;
                        btnStopScan.Visible = true;
                        btnStartCapture.Enabled = false;
                        btnStartCapture.Visible = false;
                    }
                }
            }
        }
        private void btnStopScan_Click(object sender, EventArgs e)
        {
            _stopScan = true;
        }
        private void LoadSourceCaps()
        {
            var src = _twain.CurrentSource;
            _loadingCaps = true;

            //var test = src.SupportedCaps;

            //if (groupDepth.Enabled = src.Capabilities.ICapPixelType.IsSupported)
            //{
            //    LoadDepth(src.Capabilities.ICapPixelType);
            //}
            //if (groupDuplex.Enabled = src.Capabilities.ICapAutomaticRotate.IsSupported)
            //{
            //    LoadAutoRotation(src.Capabilities.ICapAutomaticRotate);
            //}
            //if (groupDPI.Enabled = src.Capabilities.ICapXResolution.IsSupported && src.Capabilities.ICapYResolution.IsSupported)
            //{
            //    LoadDPI(src.Capabilities.ICapXResolution);
            //}
            // TODO: find out if this is how duplex works or also needs the other option
            //if (groupDuplex.Enabled = src.Capabilities.CapDuplexEnabled.IsSupported)
            //{
            //    LoadDuplex(src.Capabilities.CapDuplexEnabled);
            //}
            //if (groupSize.Enabled = src.Capabilities.ICapSupportedSizes.IsSupported)
            //{
            //    LoadPaperSize(src.Capabilities.ICapSupportedSizes);
            //}
            configurarEscanerToolStripMenuItem.Enabled = src.Capabilities.CapEnableDSUIOnly.IsSupported;
            _loadingCaps = false;
        }
        //Capacidad e tamaño de papel
        private void LoadPaperSize(ICapWrapper<SupportedSize> cap)
        {
            var list = cap.GetValues().ToList();
            comboSize.DataSource = list;
            var cur = cap.GetCurrent();
            if (list.Contains(cur))
            {
                comboSize.SelectedItem = cur;
            }
            var labelTest = cap.GetLabel();
            if (!string.IsNullOrEmpty(labelTest))
            {
                groupSize.Text = labelTest;
            }
        }
        //capacidad de dos caras
        private void LoadDuplex(ICapWrapper<BoolType> cap)
        {
            ckDuplex.Checked = cap.GetCurrent() == BoolType.True;
        }
        private void LoadAutoRotation(ICapWrapper<BoolType> cap)
        {
            ckDuplex.Checked = cap.GetCurrent() == BoolType.False;
        }
        //capacidad de numero de DPI
        private void LoadDPI(ICapWrapper<TWFix32> cap)
        {
            // only allow dpi of certain values for those source that lists everything
            var list = cap.GetValues().Where(dpi => (dpi % 50) == 0).ToList();
            comboDPI.DataSource = list;
            var cur = cap.GetCurrent();
            if (list.Contains(cur))
            {
                comboDPI.SelectedItem = cur;
            }
        }
        //Capacidad Calidad de Color
        private void LoadDepth(ICapWrapper<PixelType> cap)
        {
            var list = cap.GetValues().ToList();
            comboDepth.DataSource = list;
            var cur = cap.GetCurrent();
            if (list.Contains(cur))
            {
                comboDepth.SelectedItem = cur;
            }
            var labelTest = cap.GetLabel();
            if (!string.IsNullOrEmpty(labelTest))
            {
                groupDepth.Text = labelTest;
            }
        }
        #endregion



        private void comboSize_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!_loadingCaps && _twain.State == 4)
            {
                var sel = (SupportedSize)comboSize.SelectedItem;
                _twain.CurrentSource.Capabilities.ICapSupportedSizes.SetValue(sel);
            }
        }
        private void comboDepth_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!_loadingCaps && _twain.State == 4)
            {
                var sel = (PixelType)comboDepth.SelectedItem;
                _twain.CurrentSource.Capabilities.ICapPixelType.SetValue(sel);
            }
        }
        private void comboDPI_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!_loadingCaps && _twain.State == 4)
            {
                var sel = (TWFix32)comboDPI.SelectedItem;
                _twain.CurrentSource.Capabilities.ICapXResolution.SetValue(sel);
                _twain.CurrentSource.Capabilities.ICapYResolution.SetValue(sel);
            }
        }
        private void ckDuplex_CheckedChanged(object sender, EventArgs e)
        {
            if (!_loadingCaps && _twain.State == 4)
            {
                _twain.CurrentSource.Capabilities.CapDuplexEnabled.SetValue(ckDuplex.Checked ? BoolType.True : BoolType.False);
                _twain.CurrentSource.Capabilities.ICapAutomaticRotate.SetValue(BoolType.False);
            }
        }
        private void button5_Click(object sender, EventArgs e)
        {

        }


        //imagen

        private System.Drawing.Image generarCodigoBarras(string numero_documento)
        {
            Barcode39 b = new Barcode39();
            System.Drawing.Image img;
            b.ShowString = true;
            b.IncludeCheckSumDigit = true;
            b.TextFont = new System.Drawing.Font("Courier New", 10);
            img = b.GenerateBarcodeImage(codbarras.Width, codbarras.Height, numero_documento);
            return img;
        }
        private System.Drawing.Image generarCodigoBarras_sinver(string numero_documento)
        {
            Barcode39 b = new Barcode39();
            System.Drawing.Image img;
            b.ShowString = false;
            b.IncludeCheckSumDigit = false;
            b.TextFont = new System.Drawing.Font("Courier New", 10);
            img = b.GenerateBarcodeImage(codbarras.Width, codbarras.Height, numero_documento);
            return img;
        }
        private void dataGridView1_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            lblTipoEnvio.Text = "";
            codbarras_private = null;
            limpiar_informacion_radicado();
            if (dataGridView1.Rows.Count > 0)
            {
                string tipo_rem = "";
                string tipo = "";
                string numero_documento = "";
                string paginas = "";
                string fecha = "";
                string asunto = "";
                string dependencia = "";
                string path = "";
                string nombre_documento = "";
                int OEM = 0;
                int ESP = 0;
                int CIU = 0;
                string FUN = "";
                string remitente = "";

                if (dataGridView1.Rows[e.RowIndex].Cells[0].Value != null)
                    tipo = dataGridView1.Rows[e.RowIndex].Cells[0].Value.ToString();
                if (dataGridView1.Rows[e.RowIndex].Cells[2].Value != null)
                    numero_documento = dataGridView1.Rows[e.RowIndex].Cells[2].Value.ToString();

                if (!string.IsNullOrEmpty(tipo) && !string.IsNullOrEmpty(numero_documento))
                {
                    string IISQL = "Select a.SGD_CIU_CODIGO,a.SGD_ESP_CODI,a.SGD_OEM_CODIGO,a.SGD_DOC_FUN from sgd_dir_drecciones a where a.radi_nume_radi=" + numero_documento;
                    IISQL = IISQL + " ORDER BY SGD_DIR_TIPO  ";
                    OracleConnection con = new OracleConnection(funciones.conni);
                    try
                    {
                        con.Open();
                        OracleCommand command = new OracleCommand(IISQL, con);
                        using (OracleDataReader reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                if (int.TryParse(reader[0].ToString(), out CIU))
                                    FUN = "";
                                if (int.TryParse(reader[1].ToString(), out ESP))
                                    FUN = "";
                                if (int.TryParse(reader[2].ToString(), out OEM))
                                    FUN = "";
                                if (reader[3] != null)
                                {
                                    FUN = reader[3].ToString();
                                }
                                funciones.desconectar(con);
                            }
                            else
                                funciones.desconectar(con);
                        }                       
                    }
                    catch (Exception)
                    {
                        funciones.desconectar(con);
                    }

                    if (tipo == "RADICADO")
                    {
                        if (anexarImagenAUnRadicadoToolStripMenuItem.Checked)
                        {
                            btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.Red;
                            btnEnviarPDF1.FlatAppearance.BorderSize = 5;
                            label13.Visible = false;
                            dtFechaAnexo.Visible = false;
                            dtHoraAnexo.Visible = false;
                            lblTipoEnvio.Text = "Anexo de Radicado";
                            lblTipoEnvio.ForeColor = System.Drawing.Color.Red;
                        }
                        else
                        {
                            btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.Blue;
                            btnEnviarPDF1.FlatAppearance.BorderSize = 5;
                            label13.Visible = false;
                            dtFechaAnexo.Visible = false;
                            dtHoraAnexo.Visible = false;
                            lblTipoEnvio.Text = "Documento Principal de Radicado";
                            lblTipoEnvio.ForeColor = System.Drawing.Color.Blue;
                        }
                        if (dataGridView1.Rows[e.RowIndex].Cells[1].Value != null)
                            paginas = dataGridView1.Rows[e.RowIndex].Cells[1].Value.ToString();
                        if (dataGridView1.Rows[e.RowIndex].Cells[3].Value != null)
                            fecha = dataGridView1.Rows[e.RowIndex].Cells[3].Value.ToString();
                        if (dataGridView1.Rows[e.RowIndex].Cells[4].Value != null)
                            asunto = dataGridView1.Rows[e.RowIndex].Cells[4].Value.ToString();
                        if (dataGridView1.Rows[e.RowIndex].Cells[5].Value != null)
                            dependencia = dataGridView1.Rows[e.RowIndex].Cells[5].Value.ToString();
                        if (dataGridView1.Rows[e.RowIndex].Cells[6].Value != null)
                            path = dataGridView1.Rows[e.RowIndex].Cells[6].Value.ToString();

                        lbl_InfoRadicado1.Text = tipo + " No." + numero_documento.Substring(0, 4) + "-" + numero_documento.Substring(4, 3) + "-" + numero_documento.Substring(7, 6) + "-" + numero_documento.Substring(13, 1);
                        lbl_InfoRadicado2.Text = "Fecha" + fecha + "->" + dependencia;

                        if (OEM > 0)
                        {
                            IISQL = "Select a.sgd_oem_oempresa REMITENTE from SGD_OEM_OEMPRESAS a where a.SGD_OEM_CODIGO=" + OEM.ToString();
                            tipo_rem += "(OEM) ";
                        }
                        if (CIU > 0)
                        {
                            IISQL = "Select a.sgd_ciu_nombre || a.sgd_ciu_apell1 || sgd_ciu_apell2 REMITENTE from SGD_CIU_CIUDADANO a where a.sgd_ciu_codigo=" + CIU.ToString();
                            tipo_rem += "(CIU) ";
                        }
                        if (ESP > 0)
                        {
                            IISQL = "Select a.SIGLA_DE_LA_EMPRESA || '-' || a.NOMBRE_DE_LA_EMPRESA REMITENTE from BODEGA_EMPRESAS a where a.IDENTIFICADOR_EMPRESA=" + ESP.ToString();
                            tipo_rem += "(ESP) ";
                        }
                        if (FUN != string.Empty)
                        {
                            IISQL = "Select substr(USUA_NOMB,0,20) || '-' || DEPE_CODI REMITENTE from USUARIO a where a.usua_doc='" + FUN + "'";
                            tipo_rem += "(FUN) ";
                        }

                        con = new OracleConnection(funciones.conni);
                        try
                        {
                            con.Open();
                            OracleCommand command = new OracleCommand(IISQL, con);
                            using (OracleDataReader reader = command.ExecuteReader())
                            {
                                if (reader.Read())
                                {
                                    if (reader[0] != null)
                                        remitente = reader[0].ToString();
                                    funciones.desconectar(con);
                                }
                                else
                                    funciones.desconectar(con);
                            }
                           
                        }
                        catch (Exception ex)
                        {
                            funciones.desconectar(con);
                        }

                        lbl_InfoRadicado3.Text += tipo_rem;
                        lbl_InfoRadicado3.Text += remitente;

                        if (numero_documento.Length == 14)
                            codbarras.Image = generarCodigoBarras(numero_documento);

                        lbl_num_doc.Text = "RADICADO " + numero_documento.Substring(0, 4) + "-" + numero_documento.Substring(4, 3) + "-" + numero_documento.Substring(7, 6) + "-" + numero_documento.Substring(numero_documento.Length - 1);

                        if (path.Contains("pdf") || path.Contains("tif") || path.Contains("tiff"))
                            MessageBox.Show("El radicado seleccionado ya tiene un archivo asociado. Si continua, el pdf será remplazado.");
                    }
                    else if (tipo == "EXPEDIENTE")
                    {
                        btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.Black;
                        btnEnviarPDF1.FlatAppearance.BorderSize = 5;
                        label13.Visible = true;
                        dtFechaAnexo.Visible = true;
                        dtHoraAnexo.Visible = true;
                        lblTipoEnvio.Text = "Anexo de Expediente";
                        lblTipoEnvio.ForeColor = System.Drawing.Color.Black;
                        if (dataGridView1.Rows[e.RowIndex].Cells[4].Value != null)
                            asunto = dataGridView1.Rows[e.RowIndex].Cells[4].Value.ToString();
                        if (dataGridView1.Rows[e.RowIndex].Cells[5].Value != null)
                            nombre_documento = dataGridView1.Rows[e.RowIndex].Cells[5].Value.ToString();

                        lbl_InfoRadicado1.Text = tipo + " No." + numero_documento;
                        lbl_InfoRadicado2.Text = "Título:";
                        lbl_InfoRadicado3.Text = asunto;
                        lbl_InfoRadicado4.Text = "Nombre-CC-Nit:";
                        lbl_InfoRadicado5.Text = nombre_documento;
                        lbl_num_doc.Text = "EXPEDIENTE " + numero_documento;

                        if (numero_documento.Length > 14)
                            codbarras.Image = generarCodigoBarras(numero_documento);
                    }
                }
            }
        }
        private void limpiar_informacion_radicado()
        {
            lbl_InfoRadicado1.Text = "";
            lbl_InfoRadicado2.Text = "";
            lbl_InfoRadicado3.Text = "";
            lbl_InfoRadicado4.Text = "";
            lbl_InfoRadicado5.Text = "";
            lbl_num_doc.Text = "";
            lblTipoEnvio.Text = "";
            codbarras.Image = null;
            btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(0, 255, 255, 255);
            btnEnviarPDF1.FlatAppearance.BorderSize = 0;
            label13.Visible = false;
            dtFechaAnexo.Visible = false;
            dtHoraAnexo.Visible = false;
        }
        private void limpiar_gridview()
        {
            dataGridView1.DataSource = null;
            dataGridView1.Rows.Clear();
        }

        public static Bitmap RotateImage(System.Drawing.Image inputImage, float angleDegrees, bool upsizeOk,
                                         bool clipOk, System.Drawing.Color backgroundColor)
        {
            if (angleDegrees == 0f)
                return (Bitmap)inputImage.Clone();

            int oldWidth = inputImage.Width;
            int oldHeight = inputImage.Height;
            int newWidth = oldWidth;
            int newHeight = oldHeight;
            float scaleFactor = 1f;

            if (upsizeOk || !clipOk)
            {
                double angleRadians = angleDegrees * Math.PI / 180d;

                double cos = Math.Abs(Math.Cos(angleRadians));
                double sin = Math.Abs(Math.Sin(angleRadians));
                newWidth = (int)Math.Round(oldWidth * cos + oldHeight * sin);
                newHeight = (int)Math.Round(oldWidth * sin + oldHeight * cos);
            }

            if (!upsizeOk && !clipOk)
            {
                scaleFactor = Math.Min((float)oldWidth / newWidth, (float)oldHeight / newHeight);
                newWidth = oldWidth;
                newHeight = oldHeight;
            }

            Bitmap newBitmap = new Bitmap(newWidth, newHeight, backgroundColor == System.Drawing.Color.Transparent ?
                                             PixelFormat.Format32bppArgb : PixelFormat.Format24bppRgb);
            newBitmap.SetResolution(inputImage.HorizontalResolution, inputImage.VerticalResolution);


            using (Graphics graphicsObject = Graphics.FromImage(newBitmap))
            {
                graphicsObject.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphicsObject.PixelOffsetMode = PixelOffsetMode.HighQuality;
                graphicsObject.SmoothingMode = SmoothingMode.HighQuality;

                if (backgroundColor != System.Drawing.Color.Transparent)
                    graphicsObject.Clear(backgroundColor);

                graphicsObject.TranslateTransform(newWidth / 2f, newHeight / 2f);

                if (scaleFactor != 1f)
                    graphicsObject.ScaleTransform(scaleFactor, scaleFactor);

                graphicsObject.RotateTransform(angleDegrees);
                graphicsObject.TranslateTransform(-oldWidth / 2f, -oldHeight / 2f);

                graphicsObject.DrawImage(inputImage, 0, 0);
            }

            return newBitmap;
        }
        private bool eliminar_work()
        {
            if (Directory.Exists(work_folder))
            {
                DirectoryInfo di = new System.IO.DirectoryInfo(work_folder);
                foreach (FileInfo file in di.GetFiles())
                {
                    try
                    {
                        file.Delete();
                    }
                    catch (Exception)
                    {
                        MessageBox.Show("No es posible eliminar las imagenes con las que se va trabajar");
                        return false;
                    }
                }
            }
            else
            {
                MessageBox.Show("No se han creado las carpetas necesarias para que la aplicación funcione correctamente, pida asistencia para la creación de las carpetas");
                return false;
            }
            return true;
        }

        private void btnEnviarPDF1_Click(object sender, EventArgs e)
        {
            //tiene que tener una fila seleccionada

            if (true)
            {
                if (!CheckForInternetConnection("ftp://fs04cc01/orfeoscan_/webclient.txt"))
                {
                    MessageBox.Show("No hay conexión con el servidor FTP, por favor espere unos instantes y vuelva a intentar");
                    return;
                }
            }
            


            if (dataGridView1.Rows.Count > 0)
            {
                if (dataGridView1.SelectedCells.Count > 0)
                {
                    if (total_page>0)
                    {
                        string tipo = "";
                        string numero_documento = "";
                        int rad_exp = -1;
                        int anexo_count = 0;
                        string anexo_count_file = "";
                        string tDocumental = "";
                        int nPaginas = total_page;
                        int numInicialHojas = 0;
                        string observacion_cambio = "";
                        string ObservacioneS = "";
                        int NumeroDeHojas = total_page;
                        int codTTR = 0;
                        int anex_codigo = 0;
                        string servidor = "ftp://" + ConfigurationManager.AppSettings["FTP_SERVER"] + ConfigurationManager.AppSettings["FTP_P1"] + ConfigurationManager.AppSettings["FTP_ROUTE"] + ConfigurationManager.AppSettings["FTP_P2"]+ @"/bodega_dev_of01";
                        //string servidor = "ftp://" + ConfigurationManager.AppSettings["FTP_SERVER"] + ConfigurationManager.AppSettings["FTP_P1"] + ConfigurationManager.AppSettings["FTP_ROUTE"] + ConfigurationManager.AppSettings["FTP_P2"] ;
                        string extension = ".pdf";
                        string epath = ConfigurationManager.AppSettings["EPATH"];
                        string resend = "Una operación anterior fallo, desea saltar la conversión a PDF y enviar el ultimo archivo convertido";
                        if (dataGridView1.CurrentRow.Cells[0].Value != null)
                        {
                            tipo = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                            if (tipo.Replace(" ", "") == string.Empty)
                            {
                                MessageBox.Show("El registro no especifica un tipo (radicado o expediente)");
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("El registro no especifica un tipo (radicado o expediente)");
                            return;
                        }
                        if (dataGridView1.CurrentRow.Cells[2].Value != null)
                        {
                            numero_documento = dataGridView1.CurrentRow.Cells[2].Value.ToString();
                            if (tipo.Replace(" ", "") == string.Empty)
                            {
                                MessageBox.Show("El registro no especifica un numero de documento");
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("El registro no especifica un numero de documento");
                            return;
                        }

                        if (tipo == "RADICADO")
                            rad_exp = 1;
                        if (tipo == "EXPEDIENTE")
                            rad_exp = 2;

                        int EsAnexo = -1;

                        if (anexarImagenAUnRadicadoToolStripMenuItem.Checked == true && rad_exp == 1)
                            EsAnexo = 1;
                        if (rad_exp == 2)
                            EsAnexo = 1;

                        int tipoDocumentalIndex = -1;
                        string observacion = "";
                        DateTime fechaAnexo = DateTime.Now.AddDays(1);
                        #region ImagenPrincipal
                        if (EsAnexo == -1 && rad_exp == 1)
                        {
                            codTTR = 22;
                            ObservacioneS = " (" + NumeroDeHojas.ToString() + " Paginas)";

                            string TPSQL = "SELECT RADI_PATH FROM RADICADO WHERE RADI_NUME_RADI=" + numero_documento;
                            string RADI_PATH = string.Empty;
                            OracleConnection con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(TPSQL, con);
                                using (OracleDataReader reader = command.ExecuteReader())
                                {
                                    if (reader.Read())
                                    {
                                        if (reader[0] != null)
                                            RADI_PATH = reader[0].ToString();
                                        funciones.desconectar(con);
                                    }
                                    else
                                        funciones.desconectar(con);
                                }
                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }
                            if (!string.IsNullOrEmpty(RADI_PATH))
                            {
                                var confirmResult = MessageBox.Show("Este radicado ya tiene un documento asociado el archivo será remplazado. Desea continuar ?",
                                                     "Confirmación de reemplazo",
                                                     MessageBoxButtons.YesNo);
                                if (confirmResult == DialogResult.Yes)
                                {
                                    InputBoxResult result = InputBox.Show("Escriba un comentario o la razón. Si no escribe un comentario el envio se cancelara !", "Comentario", string.Empty, 599, 0);
                                    if (result.ReturnCode == DialogResult.OK)
                                    {
                                        observacion_cambio = result.Text;
                                        ObservacioneS = " (" + NumeroDeHojas.ToString() + " Paginas)(" + observacion_cambio + ")";
                                        codTTR = 23;
                                    }
                                    else
                                    {
                                        return;
                                    }
                                }
                                else
                                {
                                    return;
                                }
                            }
                            string queryNumHoj = "select RADI_NUME_HOJA from RADICADO where RADI_NUME_RADI = " + numero_documento;
                            con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(queryNumHoj, con);
                                using (OracleDataReader reader = command.ExecuteReader())
                                {
                                    if (reader.Read())
                                    {
                                        if (reader[0] != null)
                                            int.TryParse(reader[0].ToString(), out numInicialHojas);
                                        funciones.desconectar(con);
                                    }
                                    else
                                        funciones.desconectar(con);
                                }
                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }
                            //Envio de archivo al servidor
                            string imagenf = "";
                            string dirserver = "";
                            if (enviarTiffToolStripMenuItem.Checked)
                            {
                                extension = ".tif";
                                epath = ConfigurationManager.AppSettings["DPATH"];
                                resend = "Una operación anterior fallo, desea enviar el ultimo archivo nuevamente";
                            }
                            string nombrearchivo = numero_documento + extension;
                            int numHojasDigitalizadas = (NumeroDeHojas - numInicialHojas);

                            //lbl_InfoRadicado1.Text = tipo + " No." + numero_documento.Substring(0, 4) + "-" + numero_documento.Substring(4, 3) + "-" + numero_documento.Substring(7, 6) + "-" + numero_documento.Substring(13, 1);
                            imagenf = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/" + numero_documento + extension;
                            string imagenf1 = @"\" + numero_documento.Substring(0, 4) + @"\" + numero_documento.Substring(4, 3) + @"\" + numero_documento + ".tif";
                            string imagenf2 = @"\" + numero_documento.Substring(0, 4) + @"\" + numero_documento.Substring(4, 3) + @"\" + numero_documento + extension;
                            string imagenf3 = servidor + imagenf;
                            dirserver = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/";

                            string archivo_enviar = epath + imagenf2;
                            bool conversion = false;
                            if (path_recycle.Contains(numero_documento))
                            {
                                if (File.Exists(path_recycle))
                                {
                                    var confirmResult = MessageBox.Show(resend,
                                                     "Confirmación de reenvio",
                                                     MessageBoxButtons.YesNo);
                                    if (confirmResult == DialogResult.Yes)
                                    {
                                        archivo_enviar = path_recycle;
                                        conversion = true;
                                    }
                                }
                            }

                            if (!conversion)
                            {
                                if (!enviarTiffToolStripMenuItem.Checked)
                                {
                                    if (!crearPdf_1(archivo_enviar))
                                    {
                                        return;
                                    }
                                }
                                else
                                {
                                    
                                    if (!guardarTiffActual_enviar(archivo_enviar))
                                    {
                                        return;
                                    }
                                }
                            }
                            

                            FileInfo fi = new FileInfo(archivo_enviar);
                            if (IsFileLocked(fi))
                            {
                                MessageBox.Show("El archivo "+extension+" a convertir está aun en uso, por favor vuelva a intentar");
                                return;
                            }

                            if (sendFile(archivo_enviar, imagenf3, ""))
                            {
                                //guardar registro
                                string IISQL = "update radicado set RADI_NUME_HOJA=" + NumeroDeHojas + ", radi_path='" + imagenf.Replace(" ", "") + "'  where radi_nume_radi=" + numero_documento;
                                con = new OracleConnection(funciones.conni);
                                try
                                {
                                    con.Open();
                                    using (OracleCommand command = new OracleCommand(IISQL, con))
                                    {
                                        int result = command.ExecuteNonQuery();
                                    }
                                    funciones.desconectar(con);
                                }
                                catch (Exception)
                                {
                                    MessageBox.Show("Error al actualizar registro de ruta de radicado");
                                    limpiar_anexos();
                                    limpiar_imagen();
                                    //limpiar_informacion_radicado();
                                    //limpiar_gridview();
                                    hide_loading_panel();
                                    funciones.desconectar(con);
                                }

                                string codusdp = usuarioScanOrfeo.DEPE_CODI.ToString().PadLeft(3, '0') + usuarioScanOrfeo.USUA_CODI.ToString().PadLeft(3, '0');
                                string ISQL_HL = "insert into hist_eventos(DEPE_CODI,HIST_FECH,USUA_CODI,RADI_NUME_RADI,HIST_OBSE,USUA_CODI_DEST,USUA_DOC,SGD_TTR_CODIGO,NUM_PAG_DIGIT) values (";
                                ISQL_HL += usuarioScanOrfeo.DEPE_CODI + "," + varFechaSistema + "," + usuarioScanOrfeo.USUA_CODI + "," + numero_documento + ",'" + ObservacioneS + "'," + codusdp + "," + usuarioScanOrfeo.USUA_DOC + "," + codTTR + "," + numHojasDigitalizadas + ")";
                                con = new OracleConnection(funciones.conni);
                                try
                                {
                                    con.Open();
                                    using (OracleCommand command = new OracleCommand(ISQL_HL, con))
                                    {
                                        int result = command.ExecuteNonQuery();
                                    }
                                    funciones.desconectar(con);
                                    MessageBox.Show("Archivo enviado correctamente");
                                    limpiar_anexos();
                                    limpiar_imagen();
                                    //limpiar_informacion_radicado();
                                    //limpiar_gridview();
                                    hide_loading_panel();
                                }
                                catch (Exception)
                                {
                                    MessageBox.Show("Error en insertar registro historico");
                                    limpiar_anexos();
                                    limpiar_imagen();
                                    //limpiar_informacion_radicado();
                                    //limpiar_gridview();
                                    hide_loading_panel();
                                    funciones.desconectar(con);
                                }
                            }
                            else
                            {
                                if (!conversion)
                                {
                                    path_recycle = epath + imagenf2;
                                }
                                return;
                            }
                        }
                        #endregion
                        #region AnexoRadicado
                        if (EsAnexo == 1 && rad_exp == 1)
                        {
                            codTTR = 29;
                            string ISQL_HL = "select anex_codigo,ANEX_NUMERO from anexos where anex_codigo like '" + numero_documento + "%' ORDER BY ANEX_NUMERO DESC";
                            OracleConnection con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(ISQL_HL, con);
                                using (OracleDataReader reader = command.ExecuteReader())
                                {
                                    if (reader.Read())
                                    {
                                        if (reader[0] != null)
                                        {
                                            int.TryParse(reader[1].ToString(), out anex_codigo);
                                        }
                                        funciones.desconectar(con);
                                    }
                                    else
                                        funciones.desconectar(con);
                                }
                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }
                            anex_codigo++;
                            if (cBoxtDocumento.SelectedIndex > 0)
                            {
                                tipoDocumentalIndex = cBoxtDocumento.SelectedIndex;
                                string[] tipoDocumentalSplit = this.cBoxtDocumento.GetItemText(this.cBoxtDocumento.SelectedItem).Split(' ');
                                if (tipoDocumentalSplit != null)
                                {
                                    if (tipoDocumentalSplit.Length > 0)
                                    {
                                        int parse = 0;
                                        if (tipoDocumentalSplit[0] != null)
                                        {
                                            if (int.TryParse(tipoDocumentalSplit[0], out parse))
                                            {
                                                tDocumental = parse.ToString();
                                            }
                                        }
                                    }
                                }
                            }
                            if (tipoDocumentalIndex == -1)
                            {
                                MessageBox.Show("Debe Seleccionar un Tipo de Documental.");
                                return;
                            }
                            if (!string.IsNullOrEmpty(txtObservaciones.Text))
                            {
                                observacion = txtObservaciones.Text;
                            }
                            else
                            {
                                MessageBox.Show("Debe Escribir al menos un caracter en observaciones de anexo.");
                                return;
                            }
                            ObservacioneS = "(" + NumeroDeHojas.ToString() + " Paginas) " + observacion;

                            string imagenf = "";
                            string dirserver = "";

                            if (enviarTiffToolStripMenuItem.Checked)
                            {
                                extension = ".tif";
                                epath = ConfigurationManager.AppSettings["DPATH"];
                                resend = "Una operación anterior fallo, desea enviar el ultimo archivo nuevamente";
                            }

                            string nombrearchivo = numero_documento + "_" + anex_codigo.ToString().PadLeft(5, '0') + extension;

                            imagenf = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/" + nombrearchivo;
                            dirserver = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/";

                            string imagenf2 = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/" + nombrearchivo;
                            string imagenf3 = servidor + imagenf;



                            //string nombrearchivo = numero_documento + extension;
                            ////int numHojasDigitalizadas = (NumeroDeHojas - numInicialHojas);

                            ////lbl_InfoRadicado1.Text = tipo + " No." + numero_documento.Substring(0, 4) + "-" + numero_documento.Substring(4, 3) + "-" + numero_documento.Substring(7, 6) + "-" + numero_documento.Substring(13, 1);
                            //imagenf = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/" + numero_documento + extension;
                            //string imagenf1 = @"\" + numero_documento.Substring(0, 4) + @"\" + numero_documento.Substring(4, 3) + @"\" + numero_documento + ".tiff";
                            //string imagenf2 = @"\" + numero_documento.Substring(0, 4) + @"\" + numero_documento.Substring(4, 3) + @"\" + numero_documento + extension;
                            //string imagenf3 = servidor + imagenf;
                            //dirserver = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/";

                            //string archivo_enviar = epath + imagenf2;

                            string archivo_enviar = epath + imagenf2;

                            bool conversion = false;
                            if (path_recycle.Contains(numero_documento))
                            {
                                if (File.Exists(path_recycle))
                                {
                                    var confirmResult = MessageBox.Show(resend,
                                                     "Confirmación de reenvio",
                                                     MessageBoxButtons.YesNo);
                                    if (confirmResult == DialogResult.Yes)
                                    {
                                        archivo_enviar = path_recycle;
                                        conversion = true;
                                    }
                                }
                            }

                            if (!conversion)
                            {
                                if (!enviarTiffToolStripMenuItem.Checked)
                                {
                                    if (!crearPdf_1(archivo_enviar))
                                    {
                                        return;
                                    }
                                }
                                else
                                {
                                    if (!guardarTiffActual_enviar(archivo_enviar))
                                    {
                                        return;
                                    }
                                }
                            }

                            FileInfo fi = new FileInfo(archivo_enviar);
                            if (IsFileLocked(fi))
                            {
                                MessageBox.Show("El archivo " + extension + " a convertir está aun en uso, por favor vuelva a intentar");
                                return;
                            }

                                if (sendFile(archivo_enviar, imagenf3, ""))
                                {
                                    long length = new System.IO.FileInfo(archivo_enviar).Length;
                                    length = length / 1024;
                                    string IISQL = "insert into anexos";
                                    IISQL = IISQL + "        (sgd_rem_destino,anex_radi_nume ,anex_codigo ,anex_tipo,anex_tamano ,anex_solo_lect,anex_creador ,anex_desc ,anex_numero ,anex_nomb_archivo ,anex_borrado,anex_salida ,sgd_dir_tipo,anex_depe_creador,sgd_tpr_codigo ,anex_fech_anex)";
                                    IISQL = IISQL + " values (1 ," + numero_documento + "," + numero_documento + anex_codigo.ToString().PadLeft(5, '0') + ",'4'      ,"+ length.ToString() + ",'S'           ,'" + usuarioScanOrfeo.USUA_LOGIN + "' ,'" + ObservacioneS + "' ,'" + anex_codigo + "','" + nombrearchivo + "','N'         ,'0'         ,'0'         ,'0'              ,'" + tDocumental + "'," + varFechaSistema + ")";

                                    con = new OracleConnection(funciones.conni);
                                    try
                                    {
                                        con.Open();
                                        using (OracleCommand command = new OracleCommand(IISQL, con))
                                        {
                                            int result = command.ExecuteNonQuery();
                                        }
                                        funciones.desconectar(con);
                                    }
                                    catch (Exception)
                                    {
                                        MessageBox.Show("Error al insertar registro de anexo de radicado");
                                        limpiar_anexos();
                                        limpiar_imagen();
                                        //limpiar_informacion_radicado();
                                        //limpiar_gridview();
                                        funciones.desconectar(con);
                                        hide_loading_panel();
                                        return;
                                    }

                                    ObservacioneS = "(" + NumeroDeHojas + " Paginas)" + " (Anexo No. " + anex_codigo.ToString().PadLeft(5, '0') + ") " + observacion + "";
                                    string codusdp = usuarioScanOrfeo.DEPE_CODI.ToString().PadLeft(3, '0') + usuarioScanOrfeo.USUA_CODI.ToString().PadLeft(3, '0');
                                    ISQL_HL = "insert into hist_eventos(DEPE_CODI,HIST_FECH,USUA_CODI,RADI_NUME_RADI,HIST_OBSE,USUA_CODI_DEST,USUA_DOC,SGD_TTR_CODIGO,NUM_PAG_DIGIT) values (" + numero_documento.Substring(4, 3) + "," + varFechaSistema + "," + usuarioScanOrfeo.USUA_CODI + "," + numero_documento + ",'" + ObservacioneS + "'," + codusdp + "," + usuarioScanOrfeo.USUA_DOC + "," + codTTR + "," + NumeroDeHojas + ")";
                                    con = new OracleConnection(funciones.conni);

                                    try
                                    {
                                        con.Open();
                                        using (OracleCommand command = new OracleCommand(ISQL_HL, con))
                                        {
                                            int result = command.ExecuteNonQuery();
                                        }
                                        funciones.desconectar(con);
                                        MessageBox.Show("Archivo enviado correctamente");
                                        limpiar_anexos();
                                        limpiar_imagen();
                                        //limpiar_informacion_radicado();
                                        //limpiar_gridview();
                                        hide_loading_panel();
                                    }
                                    catch (Exception)
                                    {

                                        MessageBox.Show("Error al insertar registro historico de anexo de radicado");
                                        funciones.desconectar(con);
                                        limpiar_anexos();
                                        limpiar_imagen();
                                        //limpiar_informacion_radicado();
                                        //limpiar_gridview();
                                        hide_loading_panel();
                                        return;
                                    }
                                }
                            else
                            {
                                if (!conversion)
                                {
                                    path_recycle = epath + imagenf2;
                                }
                                return;
                            }
                        }
                        #endregion
                        #region AnexoExpediente
                        if (EsAnexo == 1 && rad_exp == 2)
                        {
                            if (cBoxtDocumento.SelectedIndex > 0)
                            {
                                tipoDocumentalIndex = cBoxtDocumento.SelectedIndex;
                                string[] tipoDocumentalSplit = this.cBoxtDocumento.GetItemText(this.cBoxtDocumento.SelectedItem).Split(' ');
                                if (tipoDocumentalSplit != null)
                                {
                                    if (tipoDocumentalSplit.Length > 0)
                                    {
                                        int parse = 0;
                                        if (tipoDocumentalSplit[0] != null)
                                        {
                                            if (int.TryParse(tipoDocumentalSplit[0], out parse))
                                            {
                                                tDocumental = parse.ToString();
                                            }
                                        }
                                    }
                                }
                            }

                            if (tipoDocumentalIndex == -1)
                            {
                                MessageBox.Show("Debe Seleccionar un Tipo de Documental.");
                                return;
                            }
                            if (!string.IsNullOrEmpty(txtObservaciones.Text))
                            {
                                observacion = txtObservaciones.Text;
                            }
                            else
                            {
                                MessageBox.Show("Debe Escribir al menos un caracter en observaciones de anexo.");
                                return;
                            }
                            fechaAnexo = new DateTime(dtFechaAnexo.Value.Year, dtFechaAnexo.Value.Month, dtFechaAnexo.Value.Day).AddHours(dtHoraAnexo.Value.Hour).AddMinutes(dtHoraAnexo.Value.Minute).AddSeconds(dtHoraAnexo.Value.Second);
                            if (fechaAnexo > DateTime.Now)
                            {
                                MessageBox.Show("La fecha y hora ingresadas deben ser inferiores a la fecha y hora actuales.");
                                return;
                            }
                            string fecha_str = String.Format("{0:yyyy/MM/dd HH:mm:ss}", fechaAnexo);
                            string fecha_str_now = String.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                            string ISQL_aux_count = " SELECT MAX(SGD_AEX_NUMERO) as MAXIMO FROM SGD_AEX_ANEXOEXPEDIENTE WHERE SGD_AEX_EXPEDIENTE = '" + numero_documento + "' ";

                            OracleConnection con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(ISQL_aux_count, con);
                                using (OracleDataReader reader = command.ExecuteReader())
                                {
                                    if (reader.Read())
                                    {
                                        if (reader[0] != null)
                                        {
                                            int.TryParse(reader[0].ToString(), out anexo_count);
                                            anexo_count++;
                                            int n = 5 - anexo_count.ToString().Length;
                                            if (n > 0)
                                            {
                                                for (int i = 0; i < n; i++)
                                                {
                                                    anexo_count_file = "0" + anexo_count_file;
                                                }
                                                anexo_count_file += anexo_count.ToString();
                                            }
                                        }
                                        funciones.desconectar(con);
                                    }
                                    else
                                        funciones.desconectar(con);
                                }

                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }
                            //Envio de archivo al servidor
                            //guardar registro
                            string imagenf = "";
                            string dirserver = "";

                            if (enviarTiffToolStripMenuItem.Checked)
                            {
                                extension = ".tif";
                                epath = ConfigurationManager.AppSettings["DPATH"];
                                resend = "Una operación anterior fallo, desea enviar el ultimo archivo nuevamente";
                            }

                            string nombrearchivo = numero_documento + "_" + anexo_count_file + extension;

                            imagenf = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/" + numero_documento +"_"+ anexo_count_file+extension;
                            dirserver = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/";
                            string imagenf2 = @"\" + numero_documento.Substring(0, 4) + @"\" + numero_documento.Substring(4, 3) + @"\docs\" + numero_documento + "_" + anexo_count_file + extension;
                            string imagenf3 = servidor + imagenf;


                            //imagenf = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/" + numero_documento + extension;
                            //dirserver = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/";

                            //string imagenf2 = @"/" + numero_documento.Substring(0, 4) + @"/" + numero_documento.Substring(4, 3) + @"/docs/" + numero_documento + extension;
                            //string imagenf3 = servidor + imagenf;
                            string archivo_enviar = epath + imagenf2;


                            bool conversion = false;
                            if (path_recycle.Contains(numero_documento))
                            {
                                if (File.Exists(path_recycle))
                                {
                                    var confirmResult = MessageBox.Show(resend,
                                                     "Confirmación de reenvio",
                                                     MessageBoxButtons.YesNo);
                                    if (confirmResult == DialogResult.Yes)
                                    {
                                        archivo_enviar = path_recycle;
                                        conversion = true;
                                    }
                                }
                            }

                            if (!conversion)
                            {
                                if (!enviarTiffToolStripMenuItem.Checked)
                                {
                                    if (!crearPdf_1(archivo_enviar))
                                    {
                                        return;
                                    }
                                }
                                else
                                {
                                    if (!guardarTiffActual_enviar(archivo_enviar))
                                    {
                                        return;
                                    }
                                }
                            }

                            FileInfo fi = new FileInfo(archivo_enviar);
                            if (IsFileLocked(fi))
                            {
                                MessageBox.Show("El archivo " + extension + " a convertir está aun en uso, por favor vuelva a intentar");
                                return;
                            }


                                if (sendFile(archivo_enviar, imagenf3, ""))
                                {
                                    long length = new System.IO.FileInfo(archivo_enviar).Length;
                                    string ISQL_aux = " INSERT INTO SGD_AEX_ANEXOEXPEDIENTE (SGD_AEX_EXPEDIENTE,SGD_AEX_NUMERO,SGD_AEX_TIPO,SGD_AEX_TAMANO,SGD_AEX_DESCRIPCION,SGD_AEX_ARCHIVO,SGD_AEX_BORRADO,SGD_AEX_FECHA,SGD_AEX_FECHACREACION,SGD_AEX_TRD,SGD_AEX_NUM_HOJAS) VALUES (";
                                    ISQL_aux = ISQL_aux + "'" + numero_documento + "'," + anexo_count + ",1,"+ length.ToString() + ", '" + observacion + "'";
                                    ISQL_aux = ISQL_aux + ", '" + numero_documento + "_" + anexo_count_file+extension + "','N',TO_DATE('" + fecha_str + "', 'yyyy-mm-dd HH24:mi:ss'),TO_DATE('" + fecha_str_now + "', 'yyyy-mm-dd HH24:mi:ss'),'" + tDocumental + "'," + NumeroDeHojas.ToString() + ")";

                                    con = new OracleConnection(funciones.conni);
                                    try
                                    {
                                        con.Open();
                                        using (OracleCommand command = new OracleCommand(ISQL_aux, con))
                                        {
                                            int result = command.ExecuteNonQuery();
                                        }
                                        funciones.desconectar(con);
                                    }
                                    catch (Exception)
                                    {
                                        MessageBox.Show("Error al insertar registro de anexo de expediente");
                                        limpiar_anexos();
                                        limpiar_imagen();
                                        //limpiar_informacion_radicado();
                                       // limpiar_gridview();
                                        funciones.desconectar(con);
                                        hide_loading_panel();
                                    }
                                    string ISQL_aux1 = " Insert into SGD_HFLD_HISTFLUJODOC (SGD_HFLD_CODIGO,SGD_FEXP_CODIGO,SGD_EXP_FECHFLUJOANT,SGD_HFLD_FECH,SGD_EXP_NUMERO,RADI_NUME_RADI,USUA_DOC,USUA_CODI,DEPE_CODI,SGD_TTR_CODIGO,SGD_FEXP_OBSERVA,SGD_HFLD_OBSERVA,SGD_FARS_CODIGO,SGD_HFLD_AUTOMATICO) values ( ";
                                    ISQL_aux1 = ISQL_aux1 + " null,0,null,sysdate,'" + numero_documento + "'," + anexo_count + ",'" + usuarioScanOrfeo.USUA_DOC + "'," + usuarioScanOrfeo.USUA_CODI + "," + usuarioScanOrfeo.DEPE_CODI + ",29,null,'" + "(" + NumeroDeHojas.ToString() + " Paginas) " + observacion + "',null,null)";

                                    con = new OracleConnection(funciones.conni);
                                    try
                                    {
                                        con.Open();
                                        using (OracleCommand command = new OracleCommand(ISQL_aux1, con))
                                        {
                                            int result = command.ExecuteNonQuery();
                                        }
                                        funciones.desconectar(con);
                                        MessageBox.Show("Archivo enviado correctamente");
                                        limpiar_anexos();
                                        limpiar_imagen();
                                        //limpiar_informacion_radicado();
                                        //limpiar_gridview();
                                        hide_loading_panel();
                                    }
                                    catch (Exception)
                                    {
                                        MessageBox.Show("Error al insertar registro historico de anexo de expediente");
                                        limpiar_anexos();
                                        limpiar_imagen();
                                        //limpiar_informacion_radicado();
                                        //limpiar_gridview();
                                        funciones.desconectar(con);
                                        hide_loading_panel();
                                    }

                                }
                        }
                        #endregion
                    }
                    else
                        MessageBox.Show("No existe una imagen a convertir para enviar como PDF/A");
                }
                else
                    MessageBox.Show("Debe seleccionar una registro de radicado o expediente antes de continuar");
            }
            else
                MessageBox.Show("No existen filas seleccionadas, debe realizar la busqueda de un registro y seleccionar una fila");
            return;
        }
        public static bool CheckForInternetConnection(string servidor)
        {
            try
            {
                var request = (FtpWebRequest)WebRequest.Create(servidor);
                request.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["FTP_IDU_USER"], ConfigurationManager.AppSettings["FTP_IDU_PASSWORD"]);
                request.Method = WebRequestMethods.Ftp.GetFileSize;
                request.KeepAlive = false;
                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    return true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (response.StatusCode ==
                        FtpStatusCode.ActionNotTakenFileUnavailable)
                    {
                        MessageBox.Show("El archivo no existe o no funciona el ftp");
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                return false;
            }
            return false;
        }
        private bool isValidConnection(string servidor)
        {
            try
            {
                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(servidor);
                request.Method = WebRequestMethods.Ftp.ListDirectory;
                request.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["FTP_IDU_USER"], ConfigurationManager.AppSettings["FTP_IDU_PASSWORD"]);
                request.GetResponse();
            }
            catch (WebException ex)
            {
                return false;
            }
            return true;
        }
        protected virtual bool IsFileLocked(FileInfo file)
        {
            FileStream stream = null;

            try
            {
                stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None);
            }
            catch (IOException)
            {
                //the file is unavailable because it is:
                //still being written to
                //or being processed by another thread
                //or does not exist (has already been processed)
                return true;
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }

            //file is not locked
            return false;
        }
        private bool sendFile(string ruta_archivo, string servidor, string ruta_servidor)
        {
            try
            {
                show_loading_panel(600, 177, 359, 20, "Enviando Archivo al Servidor");


                FtpWebRequest request;

                request = WebRequest.Create(new Uri(servidor + ruta_servidor)) as FtpWebRequest;
                request.Method = WebRequestMethods.Ftp.UploadFile;
                request.UseBinary = true;
                request.UsePassive = false;
                request.KeepAlive = false;
                request.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["FTP_IDU_USER"], ConfigurationManager.AppSettings["FTP_IDU_PASSWORD"]);
                request.ConnectionGroupName = "group";

                try
                {
                    using (FileStream fs = File.OpenRead(ruta_archivo))
                    {
                        byte[] buffer = new byte[fs.Length];
                        fs.Read(buffer, 0, buffer.Length);
                        fs.Close();
                        Stream requestStream = request.GetRequestStream();
                        requestStream.Write(buffer, 0, buffer.Length);
                        requestStream.Flush();
                        requestStream.Close();
                    }
                }
                catch (Exception)
                {
                    using (var client = new WebClient())
                    {
                        client.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["FTP_IDU_USER"], ConfigurationManager.AppSettings["FTP_IDU_PASSWORD"]);
                        client.UploadFile(servidor + ruta_servidor, WebRequestMethods.Ftp.UploadFile, ruta_archivo);
                    }
                }

                FtpWebRequest requests;
                requests = (FtpWebRequest)WebRequest.Create(servidor + ruta_servidor);
                requests.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["FTP_IDU_USER"], ConfigurationManager.AppSettings["FTP_IDU_PASSWORD"]);
                requests.KeepAlive = false;
                requests.Method = WebRequestMethods.Ftp.GetFileSize;

                try
                {
                    FtpWebResponse response = (FtpWebResponse)requests.GetResponse();
                    return true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (response.StatusCode ==
                        FtpStatusCode.ActionNotTakenFileUnavailable)
                    {
                        MessageBox.Show("El archivo no se subió, por favor vuelva a intentar");
                        return false;
                    }
                }
                hide_loading_panel();
                return true;
            }
            catch (WebException e)
            {
                try
                {
                    
                }
                catch (Exception)
                {

                }
                hide_loading_panel();
                String status = ((FtpWebResponse)e.Response).StatusDescription;
                MessageBox.Show(status);
                return false;
            }
            return true;
        }
        private bool sendFile_(string ruta_archivo, string servidor, string ruta_servidor)
        {
            try
            {
                show_loading_panel(600, 177, 359, 20, "Enviando Archivo al Servidor");

                using (var client = new WebClient())
                {
                    client.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["FTP_IDU_USER"], ConfigurationManager.AppSettings["FTP_IDU_PASSWORD"]);
                    client.UploadFile(servidor + ruta_servidor, WebRequestMethods.Ftp.UploadFile, ruta_archivo);
                }
                var request = (FtpWebRequest)WebRequest.Create(servidor + ruta_servidor);
                request.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["FTP_IDU_USER"], ConfigurationManager.AppSettings["FTP_IDU_PASSWORD"]);
                request.Method = WebRequestMethods.Ftp.GetFileSize;

                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    return true;
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (response.StatusCode ==
                        FtpStatusCode.ActionNotTakenFileUnavailable)
                    {
                        MessageBox.Show("El archivo no se subió, por favor vuelva a intentar");
                        return false;
                    }
                }
                hide_loading_panel();
                return true;
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                MessageBox.Show(ex.ToString());
                return false;
            }
            return true;
        }
        private bool FileFTPExist(string ruta_archivo, string servidor, string ruta_servidor)
        {
            //Enviar archivo si existe
            try
            {
                show_loading_panel(600, 174, 414, 36,"Verificando Imagen");
                var request = (FtpWebRequest)WebRequest.Create(servidor + ruta_servidor);
                request.Credentials = new NetworkCredential(digitalizador_user, digitalizador);
                request.Method = WebRequestMethods.Ftp.GetFileSize;

                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    hide_loading_panel();
                    return true;
                }
                catch (WebException ex)
                {
                    try
                    {
                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                        if (response.StatusCode ==
                            FtpStatusCode.ActionNotTakenFileUnavailable)
                        {
                            hide_loading_panel();
                            MessageBox.Show(response.StatusCode.ToString());
                            return false;
                        }
                        else
                        {
                            MessageBox.Show("1");
                            hide_loading_panel();
                        }
                    }
                    catch (Exception ex1)
                    {
                        MessageBox.Show(ex1.ToString());
                        hide_loading_panel();
                    }
                }
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                MessageBox.Show(ex.ToString());
                return false;
            }
            return false;
        }
        private bool crearPdf(string rutaInicial, string rutaFinal)
        {
            show_loading_panel(600, 177, 359, 20, "Convirtiendo imagen a PDF");
            try
            {
                //Captar la ruta de imagenes del radicado, si existe: usar sus imagenes
                garbage_collector();
                Thread.Sleep(1000);
                System.Drawing.Bitmap bm = new System.Drawing.Bitmap(rutaInicial);
                garbage_collector();
                int total = bm.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page);

                //Crear primera pagina
                bm.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, 0);
                var width0 = bm.Width;
                var height0 = bm.Height;
                iTextSharp.text.Rectangle cero = new iTextSharp.text.Rectangle(width0, height0);

                Document doc = new Document(cero, 0, 0, 0, 0);
              
                doc.SetMargins(0, 0, 0, 0);
                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(rutaFinal, FileMode.Create));
                writer.PDFXConformance = PdfWriter.PDFA1B;
                doc.Open();

                PdfDictionary outi = new PdfDictionary(PdfName.OUTPUTINTENT);
                outi.Put(PdfName.OUTPUTCONDITIONIDENTIFIER, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.INFO, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.S, PdfName.GTS_PDFA1);

                //Perfiles icc
                var path = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase);
                path = path.Replace("file:\\", "");
                ICC_Profile icc = ICC_Profile.GetInstance(path + @"\sRGB_v4.icc");
                PdfICCBased ib = new PdfICCBased(icc);
                ib.Remove(PdfName.ALTERNATE);
                outi.Put(PdfName.DESTOUTPUTPROFILE, writer.AddToBody(ib).IndirectReference);

                writer.ExtraCatalog.Put(PdfName.OUTPUTINTENTS, new PdfArray(outi));

                BaseFont bf = BaseFont.CreateFont(path + @"\arial.ttf", BaseFont.WINANSI, true);
                iTextSharp.text.Font f = new iTextSharp.text.Font(bf, 12);

                float subtrahend0 = doc.PageSize.Height - 10;
                iTextSharp.text.Image pool0 = iTextSharp.text.Image.GetInstance(bm, ImageFormat.Tiff);
                pool0.Alignment = 3;
                pool0.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend0);
                doc.Add(pool0);

                //Crear las paginas
                for (int i = 1; i < total; ++i)
                {
                    bm.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, i);
                    var width = bm.Width;
                    var height = bm.Height;
                    iTextSharp.text.Rectangle one = new iTextSharp.text.Rectangle(width, height);
                    doc.SetPageSize(one);
                    doc.NewPage();
                    float subtrahend = doc.PageSize.Height - 10;
                    iTextSharp.text.Image pool = iTextSharp.text.Image.GetInstance(bm, ImageFormat.Tiff);
                    pool.Alignment = 3;
                    pool.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend);
                    doc.Add(pool);
                }
                writer.CreateXmpMetadata();
                doc.Close();
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                MessageBox.Show("Falla de sistema en la conversión a PDF/A");
                if (ex.ToString().Contains("utilizado en otro proceso"))
                {
                    MessageBox.Show("El PDF esta siendo utilizado en otro proceso");
                }
                garbage_collector();
                return false;
            }
            garbage_collector();
            return true;
        }
        private bool crearPdf_(Bitmap bm, string rutaFinal)
        {
            show_loading_panel(600, 177, 359, 20, "Convirtiendo imagen a PDF");
            try
            {
                //Captar la ruta de imagenes del radicado, si existe: usar sus imagenes
                garbage_collector();
                Thread.Sleep(2000);
                garbage_collector();
                int total = bm.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page);

                //Crear primera pagina
                bm.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, 0);
                var width0 = bm.Width;
                var height0 = bm.Height;
                iTextSharp.text.Rectangle cero = new iTextSharp.text.Rectangle(width0, height0);

                Document doc = new Document(cero, 0, 0, 0, 0);

                doc.SetMargins(0, 0, 0, 0);
                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(rutaFinal, FileMode.Create));
                writer.PDFXConformance = PdfWriter.PDFA1B;
                doc.Open();

                PdfDictionary outi = new PdfDictionary(PdfName.OUTPUTINTENT);
                outi.Put(PdfName.OUTPUTCONDITIONIDENTIFIER, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.INFO, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.S, PdfName.GTS_PDFA1);

                //Perfiles icc
                var path = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase);
                path = path.Replace("file:\\", "");
                ICC_Profile icc = ICC_Profile.GetInstance(path + @"\sRGB_v4.icc");
                PdfICCBased ib = new PdfICCBased(icc);
                ib.Remove(PdfName.ALTERNATE);
                outi.Put(PdfName.DESTOUTPUTPROFILE, writer.AddToBody(ib).IndirectReference);

                writer.ExtraCatalog.Put(PdfName.OUTPUTINTENTS, new PdfArray(outi));

                BaseFont bf = BaseFont.CreateFont(path + @"\arial.ttf", BaseFont.WINANSI, true);
                iTextSharp.text.Font f = new iTextSharp.text.Font(bf, 12);

                float subtrahend0 = doc.PageSize.Height - 10;
                iTextSharp.text.Image pool0 = iTextSharp.text.Image.GetInstance(bm, ImageFormat.Tiff);
                pool0.Alignment = 3;
                pool0.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend0);
                doc.Add(pool0);

                //Crear las paginas
                for (int i = 1; i < total; ++i)
                {
                    bm.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, i);
                    var width = bm.Width;
                    var height = bm.Height;
                    iTextSharp.text.Rectangle one = new iTextSharp.text.Rectangle(width, height);
                    doc.SetPageSize(one);
                    doc.NewPage();
                    float subtrahend = doc.PageSize.Height - 10;
                    iTextSharp.text.Image pool = iTextSharp.text.Image.GetInstance(bm, ImageFormat.Tiff);
                    pool.Alignment = 3;
                    pool.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend);
                    doc.Add(pool);
                }
                writer.CreateXmpMetadata();
                doc.Close();
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                MessageBox.Show("Falla de sistema en la conversión a PDF/A");
                if (ex.ToString().Contains("utilizado en otro proceso"))
                {
                    MessageBox.Show("El PDF esta siendo utilizado en otro proceso");
                }
                garbage_collector();
                return false;
            }
            garbage_collector();
            return true;
        }


        
        private void ScanOrfeo_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Left)
                btnPrevScreen_Click(null, null);
            if (e.KeyCode == Keys.Right)
                btnNextScreen_Click(null, null);


        }

        #region impresion_etiquetas
        private void button2_Click(object sender, EventArgs e)
        {
            ListaEtiquetas = new List<model.etiquetas>();
            if (!imprimirSoloStickerToolStripMenuItem.Checked)
            {
                #region todas_las_filas_etiquetas
                if (dataGridView1.Rows.Count > 0)
                {
                    foreach (DataGridViewRow dgvRenglon in dataGridView1.Rows)
                    {
                        string tipo = "";
                        string numero_documento = "";
                        string tipo_rem = "";
                        string fecha = "";
                        string dependencia = "";
                        int OEM = 0;
                        int ESP = 0;
                        int CIU = 0;
                        string FUN = "";
                        string remitente = "";
                        string nombre_dep = "";
                        string anex_desc = "";
                        string novedad = "";

                        if (dgvRenglon.Cells[0].Value != null)
                            tipo = dgvRenglon.Cells[0].Value.ToString();
                        if (dgvRenglon.Cells[2].Value != null)
                            numero_documento = dgvRenglon.Cells[2].Value.ToString();

                        if (!string.IsNullOrEmpty(tipo) && !string.IsNullOrEmpty(numero_documento))
                        {
                            string IISQL = "Select a.SGD_CIU_CODIGO,a.SGD_ESP_CODI,a.SGD_OEM_CODIGO,a.SGD_DOC_FUN, r.RADI_DESC_ANEX from sgd_dir_drecciones a, radicado r where a.radi_nume_radi=r.radi_nume_radi and a.radi_nume_radi=" + numero_documento;
                            IISQL = IISQL + " ORDER BY SGD_DIR_TIPO  ";
                            OracleConnection con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(IISQL, con);
                                using (OracleDataReader reader = command.ExecuteReader())
                                {
                                    if (reader.Read())
                                    {
                                        if (int.TryParse(reader[0].ToString(), out CIU))
                                            FUN = "";
                                        if (int.TryParse(reader[1].ToString(), out ESP))
                                            FUN = "";
                                        if (int.TryParse(reader[2].ToString(), out OEM))
                                            FUN = "";
                                        if (reader[3] != null)
                                        {
                                            FUN = reader[3].ToString();
                                        }
                                        if (reader[4] != null)
                                        {
                                            anex_desc = reader[4].ToString();
                                        }
                                        funciones.desconectar(con);
                                    }
                                    else
                                        funciones.desconectar(con);
                                }

                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }
                            if (tipo == "RADICADO")
                            {
                                if (dgvRenglon.Cells[3].Value != null)
                                    fecha = dgvRenglon.Cells[3].Value.ToString();
                                if (dgvRenglon.Cells[5].Value != null)
                                    dependencia = dgvRenglon.Cells[5].Value.ToString();

                                if (OEM > 0)
                                {
                                    IISQL = "Select a.sgd_oem_oempresa REMITENTE from SGD_OEM_OEMPRESAS a where a.SGD_OEM_CODIGO=" + OEM.ToString();
                                    tipo_rem += "(OEM) ";
                                }
                                if (CIU > 0)
                                {
                                    IISQL = "Select a.sgd_ciu_nombre || a.sgd_ciu_apell1 || sgd_ciu_apell2 REMITENTE from SGD_CIU_CIUDADANO a where a.sgd_ciu_codigo=" + CIU.ToString();
                                    tipo_rem += "(CIU) ";
                                }
                                if (ESP > 0)
                                {
                                    IISQL = "Select a.SIGLA_DE_LA_EMPRESA || '-' || a.NOMBRE_DE_LA_EMPRESA REMITENTE from BODEGA_EMPRESAS a where a.IDENTIFICADOR_EMPRESA=" + ESP.ToString();
                                    tipo_rem += "(ESP) ";
                                }
                                if (FUN != string.Empty)
                                {
                                    IISQL = "Select substr(USUA_NOMB,0,20) || '-' || DEPE_CODI REMITENTE from USUARIO a where a.usua_doc='" + FUN + "'";
                                    tipo_rem += "(FUN) ";
                                }

                                con = new OracleConnection(funciones.conni);
                                try
                                {
                                    con.Open();
                                    OracleCommand command = new OracleCommand(IISQL, con);
                                    using (OracleDataReader reader = command.ExecuteReader())
                                    {
                                        if (reader.Read())
                                        {
                                            if (reader[0] != null)
                                                remitente = reader[0].ToString();
                                            funciones.desconectar(con);
                                        }
                                        else
                                            funciones.desconectar(con);
                                    }
                                }
                                catch (Exception)
                                {
                                    funciones.desconectar(con);
                                }

                                IISQL = "SELECT  PQRS.VERIFICAR_TIPO_REQUERIMIENTO(r.RADI_NUME_RADI, 2) from   radicado r where r.RADI_NUME_RADI =" + numero_documento;
                                con = new OracleConnection(funciones.conni);
                                try
                                {
                                    con.Open();
                                    OracleCommand command = new OracleCommand(IISQL, con);
                                    using (OracleDataReader reader = command.ExecuteReader())
                                    {
                                        if (reader.Read())
                                        {
                                            if (reader[0] != null)
                                                novedad = reader[0].ToString();
                                            funciones.desconectar(con);
                                        }
                                        else
                                            funciones.desconectar(con);
                                    }
                                }
                                catch (Exception)
                                {
                                    funciones.desconectar(con);
                                }

                                IISQL = "SELECT DEPE_NOMB FROM dependencia where DEPE_CODI=" + dependencia;
                                con = new OracleConnection(funciones.conni);
                                try
                                {
                                    con.Open();
                                    OracleCommand command = new OracleCommand(IISQL, con);
                                    using (OracleDataReader reader = command.ExecuteReader())
                                    {
                                        if (reader.Read())
                                        {
                                            if (reader[0] != null)
                                                nombre_dep = reader[0].ToString();
                                            funciones.desconectar(con);
                                        }
                                        else
                                            funciones.desconectar(con);

                                    }



                                }
                                catch (Exception)
                                {
                                    funciones.desconectar(con);
                                }

                                string fechaRad = string.Format(fecha, "dd/mm/yyyy hh:mm AMPM");
                                tipo_rem += remitente;
                                codbarras_private = generarCodigoBarras_sinver(numero_documento);

                                tipo_rem = tipo_rem.Replace("DIRECCION", "DIR");
                                tipo_rem = tipo_rem.Replace("DEPENDENCIA", "DEP");
                                tipo_rem = tipo_rem.Replace("OFICINA", "OFIC");
                                tipo_rem = tipo_rem.Replace("SUPERINTENDENCIA", "SUP");

                                nombre_dep = nombre_dep.Replace("DIRECCION", "DIR");
                                nombre_dep = nombre_dep.Replace("DEPENDENCIA", "DEP");
                                nombre_dep = nombre_dep.Replace("OFICINA", "OFIC");
                                nombre_dep = nombre_dep.Replace("SUPERINTENDENCIA", "SUP");

                                if (anex_desc.Length >= 58)
                                    anex_desc = anex_desc.Substring(0, 58);
                                else
                                    anex_desc = anex_desc.Substring(0, anex_desc.Length);
                                anex_desc = anex_desc.Replace(System.Environment.NewLine, " ");

                                etiquetas etiquetas = new etiquetas();
                                etiquetas.LINEA1 = "No. " + numero_documento + " de " + fechaRad;
                                etiquetas.LINEA2 = "Remite: " + tipo_rem;
                                etiquetas.LINEA3 = "Dep.: " + nombre_dep;
                                etiquetas.LINEA4 = "Anexos: " + anex_desc;
                                if (!string.IsNullOrEmpty(novedad))
                                {
                                    string[] words = novedad.Split('/');
                                    if (words.Length == 0)
                                    {
                                        etiquetas.LINEA5 = "Tr: " + novedad;
                                    }
                                    else
                                    {
                                        etiquetas.LINEA5 = "Tr: " + words[0];
                                    }
                                }
                                //etiquetas.LINEA5 = "Tr: " + novedad;

                                ListaEtiquetas.Add(etiquetas);
                            }
                            else if (tipo == "EXPEDIENTE")
                            {

                            }
                        }
                    }
                    if (ListaEtiquetas.Count > 0)
                        print();
                }
                #endregion
            }
            else
            {
                #region solo_fila_seleccionada
                if (dataGridView1.Rows.Count > 0)
                {

                    string tipo = "";
                    string numero_documento = "";
                    string tipo_rem = "";
                    string fecha = "";
                    string dependencia = "";
                    int OEM = 0;
                    int ESP = 0;
                    int CIU = 0;
                    string FUN = "";
                    string remitente = "";
                    string nombre_dep = "";
                    string anex_desc = "";
                    string novedad = "";

                    if (dataGridView1.CurrentRow.Cells[0].Value != null)
                        tipo = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                    if (dataGridView1.CurrentRow.Cells[2].Value != null)
                        numero_documento = dataGridView1.CurrentRow.Cells[2].Value.ToString();

                    if (!string.IsNullOrEmpty(tipo) && !string.IsNullOrEmpty(numero_documento))
                    {
                        string IISQL = "Select a.SGD_CIU_CODIGO,a.SGD_ESP_CODI,a.SGD_OEM_CODIGO,a.SGD_DOC_FUN, r.RADI_DESC_ANEX from sgd_dir_drecciones a, radicado r where a.radi_nume_radi=r.radi_nume_radi and a.radi_nume_radi=" + numero_documento;
                        IISQL = IISQL + " ORDER BY SGD_DIR_TIPO  ";
                        OracleConnection con = new OracleConnection(funciones.conni);
                        try
                        {
                            con.Open();
                            OracleCommand command = new OracleCommand(IISQL, con);
                            OracleDataReader reader = command.ExecuteReader();
                            if (reader.Read())
                            {
                                if (int.TryParse(reader[0].ToString(), out CIU))
                                    FUN = "";
                                if (int.TryParse(reader[1].ToString(), out ESP))
                                    FUN = "";
                                if (int.TryParse(reader[2].ToString(), out OEM))
                                    FUN = "";
                                if (reader[3] != null)
                                {
                                    FUN = reader[3].ToString();
                                }
                                if (reader[4] != null)
                                {
                                    anex_desc = reader[4].ToString();
                                }
                                funciones.desconectar(con);
                            }
                            else
                                funciones.desconectar(con);
                        }
                        catch (Exception)
                        {
                            funciones.desconectar(con);
                        }
                        if (tipo == "RADICADO")
                        {
                            if (dataGridView1.CurrentRow.Cells[3].Value != null)
                                fecha = dataGridView1.CurrentRow.Cells[3].Value.ToString();
                            if (dataGridView1.CurrentRow.Cells[5].Value != null)
                                dependencia = dataGridView1.CurrentRow.Cells[5].Value.ToString();

                            if (OEM > 0)
                            {
                                IISQL = "Select a.sgd_oem_oempresa REMITENTE from SGD_OEM_OEMPRESAS a where a.SGD_OEM_CODIGO=" + OEM.ToString();
                                tipo_rem += "(OEM) ";
                            }
                            if (CIU > 0)
                            {
                                IISQL = "Select a.sgd_ciu_nombre || a.sgd_ciu_apell1 || sgd_ciu_apell2 REMITENTE from SGD_CIU_CIUDADANO a where a.sgd_ciu_codigo=" + CIU.ToString();
                                tipo_rem += "(CIU) ";
                            }
                            if (ESP > 0)
                            {
                                IISQL = "Select a.SIGLA_DE_LA_EMPRESA || '-' || a.NOMBRE_DE_LA_EMPRESA REMITENTE from BODEGA_EMPRESAS a where a.IDENTIFICADOR_EMPRESA=" + ESP.ToString();
                                tipo_rem += "(ESP) ";
                            }
                            if (FUN != string.Empty)
                            {
                                IISQL = "Select substr(USUA_NOMB,0,20) || '-' || DEPE_CODI REMITENTE from USUARIO a where a.usua_doc='" + FUN + "'";
                                tipo_rem += "(FUN) ";
                            }

                            con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(IISQL, con);
                                OracleDataReader reader = command.ExecuteReader();
                                if (reader.Read())
                                {
                                    if (reader[0] != null)
                                        remitente = reader[0].ToString();
                                    funciones.desconectar(con);
                                }
                                else
                                    funciones.desconectar(con);
                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }

                            IISQL = "SELECT  PQRS.VERIFICAR_TIPO_REQUERIMIENTO(r.RADI_NUME_RADI, 2) from   radicado r where r.RADI_NUME_RADI =" + numero_documento;
                            con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(IISQL, con);
                                OracleDataReader reader = command.ExecuteReader();
                                if (reader.Read())
                                {
                                    if (reader[0] != null)
                                        novedad = reader[0].ToString();
                                    funciones.desconectar(con);
                                }
                                else
                                    funciones.desconectar(con);
                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }

                            IISQL = "SELECT DEPE_NOMB FROM dependencia where DEPE_CODI=" + dependencia;
                            con = new OracleConnection(funciones.conni);
                            try
                            {
                                con.Open();
                                OracleCommand command = new OracleCommand(IISQL, con);
                                OracleDataReader reader = command.ExecuteReader();
                                if (reader.Read())
                                {
                                    if (reader[0] != null)
                                        nombre_dep = reader[0].ToString();
                                    funciones.desconectar(con);
                                }
                                else
                                    funciones.desconectar(con);
                            }
                            catch (Exception)
                            {
                                funciones.desconectar(con);
                            }

                            string fechaRad = string.Format(fecha, "dd/mm/yyyy hh:mm AMPM");
                            tipo_rem += remitente;
                            codbarras_private = generarCodigoBarras_sinver(numero_documento);

                            tipo_rem = tipo_rem.Replace("DIRECCION", "DIR");
                            tipo_rem = tipo_rem.Replace("DEPENDENCIA", "DEP");
                            tipo_rem = tipo_rem.Replace("OFICINA", "OFIC");
                            tipo_rem = tipo_rem.Replace("SUPERINTENDENCIA", "SUP");

                            nombre_dep = nombre_dep.Replace("DIRECCION", "DIR");
                            nombre_dep = nombre_dep.Replace("DEPENDENCIA", "DEP");
                            nombre_dep = nombre_dep.Replace("OFICINA", "OFIC");
                            nombre_dep = nombre_dep.Replace("SUPERINTENDENCIA", "SUP");

                            if (anex_desc.Length >= 58)
                                anex_desc = anex_desc.Substring(0, 58);
                            else
                                anex_desc = anex_desc.Substring(0, anex_desc.Length);
                            anex_desc = anex_desc.Replace(System.Environment.NewLine, " ");

                            etiquetas etiquetas = new etiquetas();
                            etiquetas.LINEA1 = "No. " + numero_documento + " de " + fechaRad;
                            etiquetas.LINEA2 = "Remite: " + tipo_rem;
                            etiquetas.LINEA3 = "Dep.: " + nombre_dep;
                            etiquetas.LINEA4 = "Anexos: " + anex_desc;

                            if (!string.IsNullOrEmpty(novedad))
                            {
                                string[] words = novedad.Split('/');
                                if (words.Length==0)
                                {
                                    etiquetas.LINEA5 = "Tr: " + novedad;
                                }
                                else
                                {
                                    etiquetas.LINEA5 = "Tr: " + words[0];
                                }
                            }
                            ListaEtiquetas.Add(etiquetas);
                        }
                        else if (tipo == "EXPEDIENTE")
                        {

                        }

                    }
                    if (ListaEtiquetas.Count > 0)
                        print();
                }
                #endregion
            }
        }
        public void print()
        {
            PrintPage = 0;
            try
            {
                PrintDialog pd = new PrintDialog();
                string strDefaultPrinter = pd.PrinterSettings.PrinterName; 
                pdoc = new PrintDocument();
                PrinterSettings ps = new PrinterSettings();
                System.Drawing.Font font = new System.Drawing.Font("Courier New", 15);
                PaperSize psize = new PaperSize("Custom", 303, 98);
                pd.Document = pdoc;
                pd.Document.DefaultPageSettings.PaperSize = psize;
                pdoc.PrintPage += new PrintPageEventHandler(pdoc_PrintPage);

                string defaultPrinterName = ps.PrinterName;
                if (config.AppSettings.Settings["PRINTER_NAME"].Value!=null)
                {
                    ps.PrinterName = config.AppSettings.Settings["PRINTER_NAME"].Value;
                    pd.PrinterSettings.PrinterName = config.AppSettings.Settings["PRINTER_NAME"].Value;
                }
                else
                {
                    ps.PrinterName = defaultPrinterName;
                    pd.PrinterSettings.PrinterName = defaultPrinterName;
                }
                DialogResult result = pd.ShowDialog();
                if (result == DialogResult.OK)
                {
                    pdoc.PrinterSettings.DefaultPageSettings.PaperSize = new System.Drawing.Printing.PaperSize("Custom", 303, 98);
                    pdoc.Print();
                }
            }
            catch (Exception)
            {
            }
        }
        void pdoc_PrintPage(object sender, PrintPageEventArgs e)
        {
            System.Drawing.Font fuente1 = new System.Drawing.Font("Arial", 8, FontStyle.Bold);
            System.Drawing.Font fuente2 = new System.Drawing.Font("Arial", 7, FontStyle.Bold);

            int startX = 5;
            int startY = 2;
            int Offset = 2;
            
            byte[] imageBytes = Convert.FromBase64String(base64);
            System.Drawing.Image img;
            using (var ms = new MemoryStream(imageBytes, 0, imageBytes.Length))
            {
                img = System.Drawing.Image.FromStream(ms, true);
            }
                e.Graphics.DrawImage(img, new System.Drawing.Rectangle(startX + 5, startY + Offset, 69, 28));
                e.Graphics.DrawImage(codbarras_private, new System.Drawing.Rectangle(80, startY + Offset, 400, 28));

                Offset += 29;
                e.Graphics.DrawString(ListaEtiquetas[PrintPage].LINEA1, fuente1, new SolidBrush(System.Drawing.Color.Black), startX, startY + Offset);
                Offset += 11;
                e.Graphics.DrawString(ListaEtiquetas[PrintPage].LINEA2, fuente1, new SolidBrush(System.Drawing.Color.Black), startX, startY + Offset);
                Offset += 11;
                e.Graphics.DrawString(ListaEtiquetas[PrintPage].LINEA3, fuente2, new SolidBrush(System.Drawing.Color.Black), startX, startY + Offset);
                Offset += 11;
                e.Graphics.DrawString(ListaEtiquetas[PrintPage].LINEA4, fuente2, new SolidBrush(System.Drawing.Color.Black), startX, startY + Offset);
                Offset += 11;
                e.Graphics.DrawString(ListaEtiquetas[PrintPage].LINEA5, fuente2, new SolidBrush(System.Drawing.Color.Black), startX, startY + Offset);
                Offset = 0;
            PrintPage++;
            if (PrintPage + 1<=ListaEtiquetas.Count)
            {
                e.HasMorePages = true;
            }
        }
        #endregion
        private void button1_Click_1(object sender, EventArgs e)
        {
            
        }

        private void button3_Click_1(object sender, EventArgs e)
        {
            limpiar_imagen();
        }

        private void lblScreen1_Click(object sender, EventArgs e)
        {

        }

        private void btnLimpiarAnexo_Click(object sender, EventArgs e)
        {
            limpiar_anexos();
        }

        private void dataGridView1_CellLeave(object sender, DataGridViewCellEventArgs e)
        {
            
        }

        private void anexarImagenAUnRadicadoToolStripMenuItem_CheckedChanged(object sender, EventArgs e)
        {
            string tipo = "";
            lblTipoEnvio.Text = "";
            if (dataGridView1.Rows.Count > 0)
            {
                if (dataGridView1.CurrentRow.Cells[0].Value != null)
                {
                    tipo = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                }
                if (tipo!="")
                {
                    if (tipo == "RADICADO")
                    {
                        if (anexarImagenAUnRadicadoToolStripMenuItem.Checked)
                        {
                            btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.Red;
                            btnEnviarPDF1.FlatAppearance.BorderSize = 5;
                            label13.Visible = false;
                            dtFechaAnexo.Visible = false;
                            dtHoraAnexo.Visible = false;
                            lblTipoEnvio.Text = "Anexo de Radicado";
                            lblTipoEnvio.ForeColor = System.Drawing.Color.Red;
                        }
                        else
                        {
                            btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.Blue;
                            btnEnviarPDF1.FlatAppearance.BorderSize = 5;
                            label13.Visible = false;
                            dtFechaAnexo.Visible = false;
                            dtHoraAnexo.Visible = false;
                            lblTipoEnvio.Text = "Documento Principal de Radicado";
                            lblTipoEnvio.ForeColor = System.Drawing.Color.Blue;
                        }
                    }
                    if (tipo == "EXPEDIENTE")
                    {
                        btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.Black;
                        btnEnviarPDF1.FlatAppearance.BorderSize = 5;
                        label13.Visible = true;
                        dtFechaAnexo.Visible = true;
                        dtHoraAnexo.Visible = true;
                        lblTipoEnvio.Text = "Anexo de Expediente";
                        lblTipoEnvio.ForeColor = System.Drawing.Color.Black;
                    }
                }

            }
            
        }

        private void dataGridView1_DataSourceChanged(object sender, EventArgs e)
        {
            
        }

        private void ScanOrfeo_FormClosed(object sender, FormClosedEventArgs e)
        {
            Environment.Exit(0);
        }

        

        private void PageScreen1_MouseEnter(object sender, EventArgs e)
        {
            PageScreen1.BackColor = System.Drawing.Color.Black;
        }

        private void PageScreen1_MouseLeave(object sender, EventArgs e)
        {
            PageScreen1.BackColor = System.Drawing.Color.DarkGray;
        }

        private void PageScreen2_MouseEnter(object sender, EventArgs e)
        {
            PageScreen2.BackColor = System.Drawing.Color.Black;
        }

        private void PageScreen2_MouseLeave(object sender, EventArgs e)
        {
            PageScreen2.BackColor = System.Drawing.Color.DarkGray;
        }

        private void PageScreen3_MouseEnter(object sender, EventArgs e)
        {
            PageScreen3.BackColor = System.Drawing.Color.Black;
        }

        private void PageScreen3_MouseLeave(object sender, EventArgs e)
        {
            PageScreen3.BackColor = System.Drawing.Color.DarkGray;
        }

        private void button18_Click(object sender, EventArgs e)
        {
            saveFileDialog1.InitialDirectory = @"C:\";
            saveFileDialog1.RestoreDirectory = true;
            saveFileDialog1.Title = "Browse Text Files";
            saveFileDialog1.DefaultExt = "tiff";
            saveFileDialog1.Filter = "Archivos de Imagen (*.tif, *.tiff) | *.tif; *.tiff";
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string nombreArchivo = saveFileDialog1.FileName;
                guardarTiffActual(nombreArchivo);
            }
        }
        private bool crearPdf_2(string rutaFinal)
        {

            show_loading_panel(600, 177, 359, 20, "Convirtiendo imagen a PDF");
            try
            {
                garbage_collector();

                //Crear primera pagina 
                System.Drawing.Image bmp = System.Drawing.Image.FromFile(work_folder + 0 + ".tiff");
                var width0 = bmp.Width;
                var height0 = bmp.Height;
                iTextSharp.text.Rectangle cero = new iTextSharp.text.Rectangle(width0, height0);

                Document doc = new Document(cero, 0, 0, 0, 0);

                doc.SetMargins(0, 0, 0, 0);
                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(rutaFinal, FileMode.Create));
                writer.PDFXConformance = PdfWriter.PDFA1B;
                doc.Open();

                PdfDictionary outi = new PdfDictionary(PdfName.OUTPUTINTENT);
                outi.Put(PdfName.OUTPUTCONDITIONIDENTIFIER, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.INFO, new PdfString("sRGB IEC61966-2.1"));
                outi.Put(PdfName.S, PdfName.GTS_PDFA1);

                //Perfiles icc
                var path = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase);
                path = path.Replace("file:\\", "");
                ICC_Profile icc = ICC_Profile.GetInstance(path + @"\sRGB_v4.icc");
                PdfICCBased ib = new PdfICCBased(icc);
                ib.Remove(PdfName.ALTERNATE);
                outi.Put(PdfName.DESTOUTPUTPROFILE, writer.AddToBody(ib).IndirectReference);

                writer.ExtraCatalog.Put(PdfName.OUTPUTINTENTS, new PdfArray(outi));
                BaseFont bf = BaseFont.CreateFont(path + @"\arial.ttf", BaseFont.WINANSI, true);
                iTextSharp.text.Font f = new iTextSharp.text.Font(bf, 12);

                float subtrahend0 = doc.PageSize.Height - 10;

                iTextSharp.text.Image pool0;
                bool editada = false;
                foreach (var item in editadas)
                {
                    if (item == 0)
                        editada = true;
                }
                if (editada)
                    pool0 = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Jpeg);
                else
                {
                    pool0 = iTextSharp.text.Image.GetInstance(bmp, ImageFormat.Jpeg);
                }

                pool0.Alignment = 3;
                pool0.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend0);
                doc.Add(pool0);
                garbage_collector();
                //Crear las paginas
                for (int i = 1; i < total_page; ++i)
                {
                    bool editada1 = false;
                    foreach (var item in editadas)
                    {
                        if (item == i)
                            editada1 = true;
                    }

                    System.Drawing.Image bmp1 = System.Drawing.Image.FromFile(work_folder + i + ".tiff");
                    var width = bmp1.Width;
                    var height = bmp1.Height;
                    iTextSharp.text.Rectangle one = new iTextSharp.text.Rectangle(width, height);
                    doc.SetPageSize(one);
                    doc.NewPage();
                    float subtrahend = doc.PageSize.Height - 10;
                    iTextSharp.text.Image pool;

                    if (editada1)
                        pool = iTextSharp.text.Image.GetInstance(bmp1, ImageFormat.Jpeg);
                    else
                        pool = iTextSharp.text.Image.GetInstance(bmp1, ImageFormat.Jpeg);

                    pool.Alignment = 3;
                    pool.ScaleToFit(doc.PageSize.Width - (doc.RightMargin * 2), subtrahend);
                    doc.Add(pool);
                    bmp1.Dispose();
                    garbage_collector();
                }
                writer.CreateXmpMetadata();
                doc.Close();
                bmp.Dispose();
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                MessageBox.Show("Falla de sistema en la conversión a PDF/A");
                if (ex.ToString().Contains("utilizado en otro proceso"))
                {
                    MessageBox.Show("El PDF esta siendo utilizado en otro proceso");

                }
                MessageBox.Show(ex.ToString());
                garbage_collector();
                return false;
            }
            garbage_collector();
            return true;
        }
        private bool guardarTiffActual(string path)
        {
            if (total_page>0)
            {
                show_loading_panel(600, 177, 359, 20, "Guardando Imagen, por favor espere");
                System.Drawing.Image actualBitmap_ = null;
                //List<byte[]> li = new List<byte[]>();
                //for (int i = 0; i < total_page; i++)
                //{
                //    actualBitmap_ = System.Drawing.Image.FromFile(work_folder + @"\" + i + ".tiff");
                //    li.Add(ImageToByte(actualBitmap_));
                //    garbage_collector();
                //}
                var bite = MergeTiff();
                System.IO.File.WriteAllBytes(path, bite);
                MessageBox.Show("Imagen Guardada");
                hide_loading_panel();
                try
                {
                    actualBitmap_.Dispose();
                }
                catch (Exception)
                {

                }
            }
            else
            {
                MessageBox.Show("No hay una colección de imagenes para guardar");
            }
            
            ////int i = 0;
            //try
            //{

            //    if (actualBitmap != null)
            //    {
            //        List<byte[]> li = new List<byte[]>();
            //        int npag = numeroPaginas();
            //        for (i = 0; i < npag; i++)
            //        {
            //            actualBitmap.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, i);
            //            li.Add(ImageToByte(actualBitmap));
            //            garbage_collector();
            //        }
            //        var bite = MergeTiff(li);
            //        System.IO.File.WriteAllBytes(path, bite);
            //    }
            //    else
            //    {
            //        return false;
            //    }
            //}
            //catch (Exception)
            //{
            //    return false;
            //}
            return true;
        }
        private bool guardarTiffActual_enviar(string path)
        {
            try
            {
                if (total_page > 0)
                {
                    show_loading_panel(600, 177, 359, 20, "Guardando Imagen...");
                    System.Drawing.Image actualBitmap_ = null;
                    var bite = MergeTiff();
                    System.IO.File.WriteAllBytes(path, bite);
                    hide_loading_panel();
                    try
                    {
                        actualBitmap_.Dispose();
                    }
                    catch (Exception)
                    {

                    }
                }
                else
                {
                    MessageBox.Show("No hay una colección de imagenes para guardar");
                }
            }
            catch (Exception)
            {
                return false;
            }

            return true;
        }
        private void button5_Click_1(object sender, EventArgs e)
        {
            //cuando existen imagenes
            if (total_page > 0)
            {
                #region existen
                
                OpenFileDialog dialog = new OpenFileDialog();
                dialog.Filter = "Archivos de Imagen (*.tif, *.tiff) | *.tif; *.tiff";
                dialog.InitialDirectory = @"C:\";
                dialog.Title = "Abrir Imagen";

                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    show_loading_panel(600, 177, 359, 20, "Abriendo Imagen, por favor espere");
                    PageScreen1.Image = null;
                    PageScreen2.Image = null;
                    PageScreen3.Image = null;
                    PageEdit.Image = null;
                    lblScreen1.Text = "";
                    lblScreen2.Text = "";
                    lblScreen3.Text = "";
                    comboBox1.Text = "";
                    comboBox1.Items.Clear();
                    comboBox2.Text = "";
                    comboBox2.Items.Clear();
                    label28.Text = "";
                    garbage_collector();
                    total_page = 0;

                    System.Drawing.Image actualBitmap_ = System.Drawing.Image.FromFile(dialog.FileName);
                    Guid objGuid = actualBitmap_.FrameDimensionsList[0];
                    System.Drawing.Imaging.FrameDimension objDimension = new System.Drawing.Imaging.FrameDimension(objGuid);
                    int total_page_offset = actualBitmap_.GetFrameCount(objDimension);

                    int paginas_nuevas = 0;

                    if (agregar_behind)
                    {
                        //Insertar atras
                        if (Directory.Exists(work_folder))
                        {
                            DirectoryInfo di = new System.IO.DirectoryInfo(work_folder);
                            foreach (FileInfo file in di.GetFiles())
                            {
                                string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                int numero_pag = -1;
                                if (int.TryParse(woe, out numero_pag))
                                {
                                    if (numero_pag >= actual_page)
                                    {
                                        System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + woe + "_edit.tiff");
                                        file.Delete();
                                    }
                                }
                            }

                            foreach (FileInfo file in di.GetFiles())
                            {
                                string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                woe = woe.Replace("_edit", "");
                                int numero_pag = -1;
                                if (int.TryParse(woe, out numero_pag))
                                {
                                    if (numero_pag >= actual_page)
                                    {
                                        numero_pag += total_page_offset;
                                        System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + numero_pag + ".tiff");
                                    }
                                    paginas_nuevas++;
                                    total_page++;
                                    comboBox1.Items.Add(paginas_nuevas);
                                    comboBox2.Items.Add(paginas_nuevas);
                                }
                            }
                            label28.Text = total_page + " Páginas";
                        }
                        int actual_page_copy = actual_page;
                        for (int i = 0; i < total_page_offset; i++)
                        {
                            try
                            {
                                actualBitmap_.SelectActiveFrame(objDimension, i);
                                actualBitmap_.Save(work_folder + actual_page_copy + ".tiff");
                                actual_page_copy++;
                                total_page++;
                                paginas_nuevas++;
                                comboBox1.Items.Add(paginas_nuevas);
                                comboBox2.Items.Add(paginas_nuevas);
                            }
                            catch (Exception)
                            {
                                comboBox1.Items.Clear();
                                comboBox2.Items.Clear();
                                return;
                            }
                        }
                        label28.Text = total_page + " Páginas";
                    }
                    else
                    {
                        //Insertar Adelante
                        if (Directory.Exists(work_folder))
                        {
                            DirectoryInfo di = new System.IO.DirectoryInfo(work_folder);
                            foreach (FileInfo file in di.GetFiles())
                            {
                                string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                int numero_pag = -1;
                                if (int.TryParse(woe, out numero_pag))
                                {
                                    if (numero_pag > actual_page)
                                    {
                                        System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + woe + "_edit.tiff");
                                        file.Delete();
                                    }
                                }
                            }

                            foreach (FileInfo file in di.GetFiles())
                            {
                                string woe = Path.GetFileNameWithoutExtension(work_folder + @"\" + file.Name);
                                woe = woe.Replace("_edit", "");
                                int numero_pag = -1;
                                if (int.TryParse(woe, out numero_pag))
                                {
                                    if (numero_pag > actual_page)
                                    {
                                        numero_pag += total_page_offset;
                                        System.IO.File.Move(work_folder + @"\" + file.Name, work_folder + @"\" + numero_pag + ".tiff");
                                    }
                                    paginas_nuevas++;
                                    total_page++;
                                    comboBox1.Items.Add(paginas_nuevas);
                                    comboBox2.Items.Add(paginas_nuevas);
                                }
                            }
                            label28.Text = total_page + " Páginas";
                        }
                        int actual_page_copy = actual_page+1;
                        for (int i = 0; i < total_page_offset; i++)
                        {
                            try
                            {
                                actualBitmap_.SelectActiveFrame(objDimension, i);
                                actualBitmap_.Save(work_folder + actual_page_copy + ".tiff");
                                actual_page_copy++;
                                total_page++;
                                paginas_nuevas++;
                                comboBox1.Items.Add(paginas_nuevas);
                                comboBox2.Items.Add(paginas_nuevas);
                            }
                            catch (Exception)
                            {
                                comboBox1.Items.Clear();
                                comboBox2.Items.Clear();
                                return;
                            }
                        }
                        label28.Text = total_page + " Páginas";
                    }

                    cambio_flecha = true;
                    comboBox1.Text = (actual_page+1).ToString();
                    comboBox2.Text = (actual_page + 1).ToString();
                    pintar_imagen(1, actual_page);
                    cambio_flecha = false;
                    actualBitmap_.Dispose();
                    pageRange[0] = actual_page;
                    pageRange[1] = actual_page+2;
                    cargarImagen0000(pageRange, total_page);
                    label28.Text = total_page + " Páginas";
                    cargarPrincipal(actual_page);
                    garbage_collector();
                    hide_loading_panel();
                }
                garbage_collector();
                //}
                #endregion
            }
            else
            {
                if (eliminar_work())
                {
                    bool ifSaved = false;
                    OpenFileDialog dialog = new OpenFileDialog();
                    dialog.Filter = "Archivos de Imagen (*.tif, *.tiff) | *.tif; *.tiff";
                    dialog.InitialDirectory = @"C:\";
                    dialog.Title = "Abrir Imagen";

                    if (dialog.ShowDialog() == DialogResult.OK)
                    {
                        show_loading_panel(600, 177, 359, 20, "Abriendo Imagen, por favor espere");
                        limpiar_imagen();
                        System.Drawing.Image actualBitmap_ = System.Drawing.Image.FromFile(dialog.FileName);
                        Guid objGuid = actualBitmap_.FrameDimensionsList[0];
                        System.Drawing.Imaging.FrameDimension objDimension = new System.Drawing.Imaging.FrameDimension(objGuid);
                        total_page = actualBitmap_.GetFrameCount(objDimension);

                        
                        
                        //SearchContentAsync().Wait();
                        //cargarsync(objDimension, total_page, actualBitmap_, pageRange);
                        for (int i = 0; i < total_page; i++)
                        {
                            try
                            {
                                actualBitmap_.SelectActiveFrame(objDimension, i);
                                actualBitmap_.Save(work_folder + i + ".tiff", System.Drawing.Imaging.ImageFormat.Tiff);
                                comboBox1.Items.Add(i + 1);
                                comboBox2.Items.Add(i + 1);
                            }
                            catch (Exception)
                            {
                                ifSaved = false;
                                comboBox1.Items.Clear();
                                comboBox2.Items.Clear();
                                return;
                            }
                            if (i == 0)
                            {
                                cargarPrincipal(pageRange[0]);
                                if (total_page == 1)
                                {
                                    cargarImagen0000(pageRange, total_page);
                                }
                            }
                            if (i == 1 && total_page == 2)
                            {
                                cargarImagen0000(pageRange, total_page);
                            }
                            if (i == 2 && total_page > 2)
                            {
                                cargarImagen0000(pageRange, total_page);
                            }
                        }
                        cambio_flecha = true;
                        comboBox1.Text = "1";
                        comboBox2.Text = "1";
                        pageRange[0] = 0;
                        pageRange[1] = 2;
                        pintar_imagen(1, 0);
                        cambio_flecha = false;
                        label28.Text = total_page + " Páginas";
                        actualBitmap_.Dispose();

                        garbage_collector();
                        hide_loading_panel();
                    }
                    garbage_collector();
                }
            }
        }
        private void cargarsync (FrameDimension fd, int tp, System.Drawing.Image im, int[] rng)
        {
            var tasks = new List<Task>();
            for (int i = 0; i < total_page; i++)
            {
                try
                {
                    im.SelectActiveFrame(fd, i);
                    im.Save(work_folder + i + ".tiff", System.Drawing.Imaging.ImageFormat.Tiff);
                    //await Task.Run(() => {  });
                    comboBox1.Items.Add(i + 1);
                    comboBox2.Items.Add(i + 1);
                }
                catch (Exception)
                {
                    comboBox1.Items.Clear();
                    comboBox2.Items.Clear();
                    return;
                }
                if (i == 0)
                {
                    cargarPrincipal(rng[0]);
                    if (total_page == 1)
                    {
                        cargarImagen0000(rng, total_page);
                    }
                }
                if (i == 1 && total_page == 2)
                {
                    cargarImagen0000(rng, total_page);
                }
                if (i == 2 && total_page > 2)
                {
                    cargarImagen0000(rng, total_page);
                }

            }
            label28.Text = total_page + " Páginas";
            im.Dispose();
        }

        private void button4_Click(object sender, EventArgs e)
        {

        }

        private void button28_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count > 0)
            {
                if (dataGridView1.CurrentRow.Cells[2].Value != null)
                {
                    string documento = dataGridView1.CurrentRow.Cells[2].Value.ToString();
                    string tipo = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                    if (documento.Length == 14 || documento.Length == 19)
                    {
                        if (tipo == "RADICADO" || tipo == "EXPEDIENTE")
                        {
                            imagenes.Clear();
                            if (tipo== "RADICADO")
                            {

                            }
                            if (tipo == "EXPEDIENTE")
                            {

                            }
                        }
                        else
                        {
                            MessageBox.Show("Seleccione un radicado o expediente antes de iniciar el proceso de escaneo");
                        }
                    }
                    else
                    {
                        MessageBox.Show("Seleccione un radicado o expediente antes de iniciar el proceso de escaneo");
                    }
                }
                else
                {
                    MessageBox.Show("Seleccione un radicado o expediente antes de iniciar el proceso de escaneo");
                }
            }
            else
            {
                MessageBox.Show("Seleccione un radicado o expediente antes de iniciar el proceso de escaneo");
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            button8.BackColor = System.Drawing.Color.Black;
            button6.BackColor = System.Drawing.Color.White;
            agregar_behind = false;
        }

        private void button6_Click(object sender, EventArgs e)
        {
            button6.BackColor = System.Drawing.Color.Black;
            button8.BackColor = System.Drawing.Color.White;
            agregar_behind = true;
        }

        private void button12_Click_1(object sender, EventArgs e)
        {
            limpiar_imagen();
        }

        private void borrarSelecciónToolStripMenuItem_Click(object sender, EventArgs e)
        {
            borrar_seleccion();
        }

        private void button13_Click_1(object sender, EventArgs e)
        {
            if (panel6.Height==0)
            {
                panel6.Dock = DockStyle.None;
                panel4.Dock = DockStyle.None;

                panel6.Location = new Point(1659, 247);
                panel6.Size = new Size(0, 0);

                panel4.Location = new Point(0, 400);
                panel4.Size = new Size(0, 0);

                panel6.Size = new Size(1854, 286);
                panel4.Size = new Size(1854, 723);

                panel6.Dock = DockStyle.Top;
                panel4.Dock = DockStyle.Bottom;

                comboBox2.Visible = false;
                button4.Visible = false;
                button14.Visible = false;

//                panel 6
//1854; 286
//0; 24

//panel 4
//0; 316
//1854; 723

            }
            else
            {
                panel6.Size = new Size(0, 0);
                panel6.Location = new Point(1, 1);
                panel4.Size = new Size(1523, 1000);
                panel4.Location = new Point(0, 0);
                comboBox2.Visible = true;
                button4.Visible = true;
                button14.Visible = true;
            }
            
        }

        
        private void SetScale(float picture_scale)
        {
            //picture_scale = zoom_ * 1.1F;
            // Set the scale.
            float PictureScale = picture_scale;

            // Make a Bitmap of the right size.
            //System.Drawing.Image Bm = PageEdit.Image;

            File.Copy(work_folder + actual_page + ".tiff", work_folder + actual_page + "_zoom.tiff", true);
            Bitmap actualBitmap_ = (Bitmap)System.Drawing.Image.FromFile(work_folder + actual_page + "_zoom.tiff");

            Bitmap bitmap = new Bitmap(actualBitmap_, new Size((int)(actualBitmap_.Width), (int)(actualBitmap_.Height)));

            // Make a Graphics object for the Bitmap.
            // (If you need to use this later, you can give it
            // class scope so you don't need to make a new one.)
            using (Graphics gr = Graphics.FromImage(bitmap))
            {
                // Use a white background
                // (so you can see where the picture is).
                //gr.Clear(System.Drawing.Color.White);

                // Draw smoothly.
                //gr.SmoothingMode = SmoothingMode.AntiAlias;

                // Scale.
                gr.ScaleTransform(PictureScale, PictureScale);

                // Draw the image.
                //DrawImage(gr);
            }

            // Display the result.
            PageEdit.Image = bitmap;
            actualBitmap_.Dispose();
            //actualBitmap_.Dispose();
        }

        private void verPáginaCompletaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int h_p = panel2.Height - System.Windows.Forms.SystemInformation.HorizontalScrollBarHeight;
            if (actual_page != -1)
            {
                using (System.Drawing.Image image = System.Drawing.Image.FromFile(work_folder + actual_page + ".tiff"))
                {
                    zoom_ = ((float)h_p / (float)image.Height);
                    this.workingBitmap = new Bitmap(image,
                    new Size((int)((float)image.Width * zoom_), (int)((float)image.Height * zoom_)));
                    this.PageEdit.Image = workingBitmap;
                    garbage_collector();
                }
                toolStripMenuItem2.Checked = false;
                toolStripMenuItem3.Checked = false;
                toolStripMenuItem4.Checked = false;
                toolStripMenuItem5.Checked = false;
                toolStripMenuItem6.Checked = false;
                toolStripMenuItem7.Checked = false;
                toolStripMenuItem8.Checked = false;
                toolStripMenuItem9.Checked = false;
            }
        }

        private void expedientes60DiasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(usuarioScanOrfeo.DEPE_CODI.ToString().Trim()))
                BuscarExpediente60();
            else
                MessageBox.Show("Debe seleccionar una dependencia a Buscar");
        }
        private void BuscarExpediente60()
        {
            codbarras_private = null;
            limpiar_informacion_radicado();
            dataGridView1.DataSource = null;
            string IISQL;
            OracleConnection con = new OracleConnection(funciones.conni);
            IISQL = " SELECT DISTINCT 'EXPEDIENTE' as TIPO, S.DEPE_CODI AS DEPENDENCIA, S.SGD_EXP_NUMERO AS NÚMERO_EXPEDIENTE,(SELECT COUNT(*) FROM SGD_AEX_ANEXOEXPEDIENTE A WHERE A.SGD_AEX_EXPEDIENTE = S.SGD_EXP_NUMERO) AS NÚM_ANEXOS";
            IISQL = IISQL + ",S.SGD_SEXP_PAREXP1 AS ASUNTO, S.SGD_SEXP_PAREXP3 NOMBRE_Y_DOCUMENTO,S.SGD_SEXP_FECH AS FECHA, S.SGD_SEXP_PAREXP2";
            IISQL = IISQL + " FROM SGD_SEXP_SECEXPEDIENTES S RIGHT JOIN SGD_EXP_EXPEDIENTE E ON E.SGD_EXP_ESTADO < 2 AND S.SGD_EXP_NUMERO = E.SGD_EXP_NUMERO ";
            IISQL = IISQL + " WHERE S.SGD_SEXP_FECH BETWEEN (SYSDATE-60) AND SYSDATE  ";
            IISQL = IISQL + " ORDER BY SGD_SEXP_FECH DESC ";

            try
            {
                con.Open();
                show_loading_panel(600, 177, 359, 20, "Cargando Registros");
                OracleCommand command = new OracleCommand(IISQL, con);
                OracleDataAdapter sda = new OracleDataAdapter(command);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                con.Dispose();
                dataGridView1.DataSource = dt;
                dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                con.Close();
                con.Dispose();
                MessageBox.Show(ex.ToString());
            }
            //System.Windows.Forms.Clipboard.SetText(IISQL);
        }

        private void radicados60DíasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(usuarioScanOrfeo.DEPE_CODI.ToString().Trim()))
                BuscarRadicados60();
            else
                MessageBox.Show("Debe seleccionar una dependencia a Buscar");
        }
        private void BuscarRadicados60()
        {
            codbarras_private = null;
            limpiar_informacion_radicado();
            dataGridView1.DataSource = null;
            string IISQL;
            OracleConnection con = new OracleConnection(funciones.conni);
            if (impresiónDeSobresToolStripMenuItem.Checked)
            {
                IISQL = "Select 'RADICADO' as TIPO,   a.RADI_NUME_RADI AS NUMERO_RADICADO,   a.RADI_FECH_RADI AS FECHA,   renv.SGD_RENV_NOMBRE AS DESTINO,   renv.SGD_RENV_DIR AS DIRECCIÓN,   renv.SGD_RENV_DEPTO AS DEPARTAMENTO,   renv.SGD_RENV_MPIO AS MUNICIPIO,   a.RA_ASUN AS ASUNTO,    a.RADI_USUA_ACTU,   a.RADI_NUME_HOJA,   a.RADI_NOMB || a.RADI_PRIM_APEL || a.RADI_SEGU_APEL AS RADI_NOMB,   a.RADI_DEPE_ACTU as DEP_ACTUAL,   b.DEPE_NOMB,   TO_CHAR(a.RADI_FECH_RADI,'YYYYMM') as ANOMES_RAD";
                IISQL += " from Radicado a,dependencia b, sgd_renv_regenvio renv where a.RADI_DEPE_ACTU=b.DEPE_CODI AND a.RADI_NUME_RADI=renv.RADI_NUME_SAL AND (SGD_RENV_PLANILLA IS NULL OR SGD_RENV_PLANILLA='00') AND a.RADI_CHAR_RADI LIKE '" + DateTime.Now.Year.ToString() + usuarioScanOrfeo.DEPE_CODI.ToString().Substring(0, 3) + "%'";
                //IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_RADI AS NUMERO_RADICADO,a.RADI_FECH_RADI AS FECHA,renv.SGD_RENV_NOMBRE AS DESTINO,renv.SGD_RENV_DIR AS DIRECCIÓN,renv.SGD_RENV_DEPTO AS DEPARTAMENTO,renv.SGD_RENV_MPIO AS MUNICIPIO,a.RA_ASUN AS ASUNTO from Radicado a,dependencia b, sgd_renv_regenvio renv where a.RADI_DEPE_ACTU=b.DEPE_CODI AND a.RADI_NUME_RADI=renv.RADI_NUME_SAL AND a.RADI_CHAR_RADI LIKE '" + DateTime.Now.Year.ToString() + usuarioScanOrfeo.DEPE_CODI.ToString().Substring(0, 3) + "%'";
            }
            else
            {
                IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_HOJA PAGINAS, a.RADI_NUME_RADI AS NUMERO_RADICADO,a.RADI_FECH_RADI AS FECHA, a.RA_ASUN AS ASUNTO, a.RADI_USUA_ACTU,a.RADI_PATH, a.RADI_NOMB || a.RADI_PRIM_APEL || a.RADI_SEGU_APEL AS RADI_NOMB, a.RADI_DEPE_ACTU as DEP_ACTUAL, b.DEPE_NOMB,TO_CHAR(a.RADI_FECH_RADI,'YYYYMM') as ANOMES_RAD";
                IISQL += " from Radicado a,dependencia b ";
                IISQL += " where a.RADI_DEPE_ACTU=b.DEPE_CODI AND a.radi_path is null AND a.RADI_CHAR_RADI LIKE '" + DateTime.Now.Year.ToString() + usuarioScanOrfeo.DEPE_CODI.ToString().Substring(0, 3) + "%'";              
            }

            //if (impresiónDeSobresToolStripMenuItem.Checked)
            //    IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_RADI AS NUMERO_RADICADO,a.RADI_FECH_RADI AS FECHA,renv.SGD_RENV_NOMBRE AS DESTINO,renv.SGD_RENV_DIR AS DIRECCIÓN,renv.SGD_RENV_DEPTO AS DEPARTAMENTO,renv.SGD_RENV_MPIO AS MUNICIPIO,a.RA_ASUN AS ASUNTO from Radicado a,dependencia b, sgd_renv_regenvio renv where a.RADI_DEPE_ACTU=b.DEPE_CODI AND a.RADI_NUME_RADI=renv.RADI_NUME_SAL AND a.RADI_CHAR_RADI LIKE '" + DateTime.Now.Year.ToString() + usuarioScanOrfeo.DEPE_CODI.ToString().Substring(0, 3) + "%'";
            //else
            //    IISQL = "Select 'RADICADO' as TIPO, a.RADI_NUME_HOJA PAGINAS,a.RADI_NUME_RADI NUMERO_RADICADO,a.RADI_FECH_RADI FECHA,       a.RA_ASUN ASUNTO, a.RADI_DEPE_ACTU DEPENDENCIA_ACTUAL,a.RADI_PATH PATH  from Radicado a where a.radi_nume_radi is not null  ";


            if (cBoxtRadicado.Text!="")
            {
                string tipoRad = cBoxtRadicado.Text.Trim().Substring(0, 1);
                IISQL += " and a.radi_char_radi like '%" + tipoRad + "'";
            }
            
            

            if (pQRTelefónicasToolStripMenuItem.Checked)
            {
                IISQL += " and (TDOC_CODI != 26 AND MREC_CODI !=6) ";
            }
            if (pQRPersonalToolStripMenuItem.Checked)
            {
                IISQL += " and (TDOC_CODI != 26 AND MREC_CODI !=5) ";
            }

            try
            {
                show_loading_panel(600, 177, 359, 20, "Cargando Registros");
                lblTipoEnvio.Text = "";
                btnEnviarPDF1.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(0, 255, 255, 255);
                btnEnviarPDF1.FlatAppearance.BorderSize = 0;
                label13.Visible = false;
                dtFechaAnexo.Visible = false;
                dtHoraAnexo.Visible = false;

                con.Open();
                OracleCommand command = new OracleCommand(IISQL, con);
                OracleDataAdapter sda = new OracleDataAdapter(command);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                con.Dispose();
                dataGridView1.DataSource = dt;
                dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                hide_loading_panel();
            }
            catch (Exception ex)
            {
                hide_loading_panel();
                con.Close();
                con.Dispose();
                MessageBox.Show(ex.ToString());
            }
        }

        private void pQRTelefónicasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (pQRPersonalToolStripMenuItem.Checked)
            {
                pQRPersonalToolStripMenuItem.Checked = false;
            }
        }

        private void pQRPersonalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (pQRTelefónicasToolStripMenuItem.Checked)
            {
                pQRTelefónicasToolStripMenuItem.Checked = false;
            }
        }

        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBox2.SelectedIndex >= 0 && !cambio_flecha)
            {
                string page = comboBox2.Text;
                int page_int = -1;
                if (int.TryParse(page, out page_int))
                {
                    if (page_int <= total_page)
                    {
                        pageRange[0] = page_int - 1;
                        pageRange[1] = pageRange[0] + 2;
                        actual_page = page_int - 1;
                        cargarImagen0000(pageRange, total_page);
                        comboBox1.Text = (pageRange[0] + 1).ToString();
                        comboBox2.Text = (pageRange[0] + 1).ToString();
                        pintar_imagen(1, pageRange[0]);
                        cargarPrincipal(actual_page);

                    }
                }
            }
            PageEdit.Focus();
        }

        private void button4_Click_1(object sender, EventArgs e)
        {
            if (actual_page != 0)
            {
                if (actual_page <= total_page - 1)
                {
                    actual_page--;
                    comboBox1.Text = (actual_page + 1).ToString();
                    comboBox2.Text = (actual_page + 1).ToString();
                    pintar_imagen(1, actual_page);
                    cargarPrincipal(actual_page);
                }
            }
            if (actual_page < pageRange[0])
            {
                seleccionPage(2);
                pageRange[0] = actual_page;
                pageRange[1] = pageRange[0] + 2;
                cargarImagen0000(pageRange, total_page);
            }
            else
            {
                if (actual_page == pageRange[0])
                {
                    seleccionPage(0);
                }
                if (actual_page == pageRange[0] + 1)
                {
                    seleccionPage(1);
                }
                if (actual_page == pageRange[0] + 2)
                {
                    seleccionPage(2);
                }
            }
        }

        private void button14_Click(object sender, EventArgs e)
        {
            if (actual_page + 2 <= total_page)
            {
                actual_page++;
                comboBox1.Text = (actual_page + 1).ToString();
                comboBox2.Text = (actual_page + 1).ToString();
                pintar_imagen(1, actual_page);
                cargarPrincipal(actual_page);
            }
            if (actual_page > pageRange[1])
            {
                seleccionPage(0);
                pageRange[0] = actual_page;
                pageRange[1] = pageRange[0] + 2;
                cargarImagen0000(pageRange, total_page);
            }
            else
            {
                if (actual_page == pageRange[0])
                {
                    seleccionPage(0);
                }
                if (actual_page == pageRange[0] + 1)
                {
                    seleccionPage(1);
                }
                if (actual_page == pageRange[0] + 2)
                {
                    seleccionPage(2);
                }
            }
        }

        private void enviarPDFAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (enviarTiffToolStripMenuItem.Checked)
            {
                enviarPDFAToolStripMenuItem.Checked = true;
                enviarTiffToolStripMenuItem.Checked = false;
            }
            
        }

        private void enviarTiffToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (enviarPDFAToolStripMenuItem.Checked)
            {
                enviarPDFAToolStripMenuItem.Checked = false;
                enviarTiffToolStripMenuItem.Checked = true;
            }
        }

        private void button15_Click(object sender, EventArgs e)
        {
            if (total_page>0)
            {
                saveFileDialog1.InitialDirectory = @"C:\";
                saveFileDialog1.RestoreDirectory = true;
                saveFileDialog1.Title = "Guardar PDF";
                saveFileDialog1.DefaultExt = "pdf";
                saveFileDialog1.Filter = "Archivos PDF (*.pdf) | *.pdf";
                if (saveFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    string nombreArchivo = saveFileDialog1.FileName;
                    if (crearPdf_2(nombreArchivo))
                    {
                        MessageBox.Show("PDF guardado");
                    }
                }
            }
            else
            {
                MessageBox.Show("No hay imagenes para convertir y guardar como PDF/A");
            }
        }
    }
    public class InputBoxResult
    {
        public DialogResult ReturnCode;
        public string Text;
    }
    public class InputBox
    {

        #region Private Windows Contols and Constructor

        // Create a new instance of the form.
        private static Form frmInputDialog;
        private static Label lblPrompt;
        private static Button btnOK;
        private static Button btnCancel;
        private static TextBox txtInput;

        public InputBox()
        {
        }

        #endregion

        #region Private Variables

        private static string _formCaption = string.Empty;
        private static string _formPrompt = string.Empty;
        private static InputBoxResult _outputResponse = new InputBoxResult();
        private static string _defaultValue = string.Empty;
        private static int _xPos = -1;
        private static int _yPos = -1;

        #endregion

        #region Windows Form code

        private static void InitializeComponent()
        {
            // Create a new instance of the form.
            frmInputDialog = new Form();
            lblPrompt = new Label();
            btnOK = new Button();
            btnCancel = new Button();
            txtInput = new TextBox();
            frmInputDialog.SuspendLayout();
            // 
            // lblPrompt
            // 
            lblPrompt.Anchor = ((AnchorStyles)((((AnchorStyles.Top | AnchorStyles.Bottom) | AnchorStyles.Left) | AnchorStyles.Right)));
            lblPrompt.BackColor = SystemColors.Control;
            lblPrompt.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, FontStyle.Regular, GraphicsUnit.Point, ((Byte)(0)));
            lblPrompt.Location = new Point(12, 9);
            lblPrompt.Name = "lblPrompt";
            lblPrompt.Size = new Size(302, 82);
            lblPrompt.TabIndex = 3;
            // 
            // btnOK
            // 
            btnOK.DialogResult = DialogResult.OK;
            btnOK.FlatStyle = FlatStyle.Popup;
            btnOK.Location = new Point(326, 8);
            btnOK.Name = "btnOK";
            btnOK.Size = new Size(64, 24);
            btnOK.TabIndex = 1;
            btnOK.Text = "&OK";
            btnOK.Click += new EventHandler(btnOK_Click);
            // 
            // btnCancel
            // 
            btnCancel.DialogResult = DialogResult.Cancel;
            btnCancel.FlatStyle = FlatStyle.Popup;
            btnCancel.Location = new Point(326, 40);
            btnCancel.Name = "btnCancel";
            btnCancel.Size = new Size(64, 24);
            btnCancel.TabIndex = 2;
            btnCancel.Text = "&Cancel";
            btnCancel.Click += new EventHandler(btnCancel_Click);
            // 
            // txtInput
            // 
            txtInput.Location = new Point(8, 100);
            txtInput.Name = "txtInput";
            txtInput.Size = new Size(379, 20);
            txtInput.TabIndex = 0;
            txtInput.Text = "";
            // 
            // InputBoxDialog
            // 
            frmInputDialog.AutoScaleBaseSize = new Size(5, 13);
            frmInputDialog.ClientSize = new Size(398, 128);
            frmInputDialog.Controls.Add(txtInput);
            frmInputDialog.Controls.Add(btnCancel);
            frmInputDialog.Controls.Add(btnOK);
            frmInputDialog.Controls.Add(lblPrompt);
            frmInputDialog.FormBorderStyle = FormBorderStyle.FixedDialog;
            frmInputDialog.MaximizeBox = false;
            frmInputDialog.MinimizeBox = false;
            frmInputDialog.Name = "InputBoxDialog";
            frmInputDialog.ResumeLayout(false);
        }

        #endregion

        #region Private function, InputBox Form move and change size

        static private void LoadForm()
        {
            OutputResponse.ReturnCode = DialogResult.Ignore;
            OutputResponse.Text = string.Empty;

            txtInput.Text = _defaultValue;
            lblPrompt.Text = _formPrompt;
            frmInputDialog.Text = _formCaption;

            // Retrieve the working rectangle from the Screen class
            // using the PrimaryScreen and the WorkingArea properties.
            System.Drawing.Rectangle workingRectangle = Screen.PrimaryScreen.WorkingArea;

            if ((_xPos >= 0 && _xPos < workingRectangle.Width - 100) && (_yPos >= 0 && _yPos < workingRectangle.Height - 100))
            {
                frmInputDialog.StartPosition = FormStartPosition.Manual;
                frmInputDialog.Location = new System.Drawing.Point(_xPos, _yPos);
            }
            else
                frmInputDialog.StartPosition = FormStartPosition.CenterScreen;


            string PrompText = lblPrompt.Text;

            int n = 0;
            int Index = 0;
            while (PrompText.IndexOf("\n", Index) > -1)
            {
                Index = PrompText.IndexOf("\n", Index) + 1;
                n++;
            }

            if (n == 0)
                n = 1;

            System.Drawing.Point Txt = txtInput.Location;
            Txt.Y = Txt.Y + (n * 4);
            txtInput.Location = Txt;
            System.Drawing.Size form = frmInputDialog.Size;
            form.Height = form.Height + (n * 4);
            frmInputDialog.Size = form;

            txtInput.SelectionStart = 0;
            txtInput.SelectionLength = txtInput.Text.Length;
            txtInput.Focus();
        }

        #endregion

        #region Button control click event

        static private void btnOK_Click(object sender, System.EventArgs e)
        {
            OutputResponse.ReturnCode = DialogResult.OK;
            OutputResponse.Text = txtInput.Text;
            frmInputDialog.Dispose();
        }

        static private void btnCancel_Click(object sender, System.EventArgs e)
        {
            OutputResponse.ReturnCode = DialogResult.Cancel;
            OutputResponse.Text = string.Empty; //Clean output response
            frmInputDialog.Dispose();
        }

        #endregion

        #region Public Static Show functions

        static public InputBoxResult Show(string Prompt)
        {
            InitializeComponent();
            FormPrompt = Prompt;

            // Display the form as a modal dialog box.
            LoadForm();
            frmInputDialog.ShowDialog();
            return OutputResponse;
        }

        static public InputBoxResult Show(string Prompt, string Title)
        {
            InitializeComponent();

            FormCaption = Title;
            FormPrompt = Prompt;

            // Display the form as a modal dialog box.
            LoadForm();
            frmInputDialog.ShowDialog();
            return OutputResponse;
        }

        static public InputBoxResult Show(string Prompt, string Title, string Default)
        {
            InitializeComponent();

            FormCaption = Title;
            FormPrompt = Prompt;
            DefaultValue = Default;

            // Display the form as a modal dialog box.
            LoadForm();
            frmInputDialog.ShowDialog();
            return OutputResponse;
        }

        static public InputBoxResult Show(string Prompt, string Title, string Default, int XPos, int YPos)
        {
            InitializeComponent();
            FormCaption = Title;
            FormPrompt = Prompt;
            DefaultValue = Default;
            XPosition = XPos;
            YPosition = YPos;

            // Display the form as a modal dialog box.
            LoadForm();
            frmInputDialog.ShowDialog();
            return OutputResponse;
        }

        #endregion

        #region Private Properties

        static private string FormCaption
        {
            set
            {
                _formCaption = value;
            }
        } // property FormCaption

        static private string FormPrompt
        {
            set
            {
                _formPrompt = value;
            }
        } // property FormPrompt

        static private InputBoxResult OutputResponse
        {
            get
            {
                return _outputResponse;
            }
            set
            {
                _outputResponse = value;
            }
        } // property InputResponse

        static private string DefaultValue
        {
            set
            {
                _defaultValue = value;
            }
        } // property DefaultValue

        static private int XPosition
        {
            set
            {
                if (value >= 0)
                    _xPos = value;
            }
        } // property XPos

        static private int YPosition
        {
            set
            {
                if (value >= 0)
                    _yPos = value;
            }
        } // property YPos

        #endregion
    }
}
